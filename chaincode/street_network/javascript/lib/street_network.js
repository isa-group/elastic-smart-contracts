/*
 * SPDX-License-Identifier: Apache-2.0
 */

'use strict';

const { Contract } = require('fabric-contract-api');
const request = require('postman-request');

class Street_network extends Contract {

    async initLedger(ctx) {
        console.info('============= START : Initialize Ledger ===========');
        /*const detections = [
            {
                streetId: 1,
                detectionDateTime: 1588698495684,
                detectionKilometer: 1,
                detectionLatitude: -5.930535,
                detectionLongitude: 37.342912,
                direction: 'ASCENDENT',
                
            },
            {
                streetId: 1,
                detectionDateTime: 1588698494684,
                detectionKilometer: 2,
                detectionLatitude: -5.930535,
                detectionLongitude: 37.342912,
                direction: 'DESCENDENT',
                
            },
            {
                streetId: 1,
                detectionDateTime: 1588698493684,
                detectionKilometer: 2,
                detectionLatitude: -5.930535,
                detectionLongitude: 37.342912,
                direction: 'ASCENDENT',
                
            },
            {
                streetId: 1,
                detectionDateTime: 1588698492684,
                detectionKilometer: 3,
                detectionLatitude: -5.930535,
                detectionLongitude: 37.342912,
                direction: 'ASCENDENT',
                
            },
            {
                streetId: 1,
                detectionDateTime: 1588698491684,
                detectionKilometer: 4,
                detectionLatitude: -5.930535,
                detectionLongitude: 37.342912,
                direction: 'DESCENDENT',
                
            },
            {
                streetId: 1,
                detectionDateTime: 1588698490684,
                detectionKilometer: 4,
                detectionLatitude: -5.930535,
                detectionLongitude: 37.342912,
                direction: 'ASCENDENT',
                
            },
            {
                streetId: 2,
                detectionDateTime: 1588698489684,
                detectionKilometer: 1,
                detectionLatitude: -5.930535,
                detectionLongitude: 37.342912,
                direction: 'ASCENDENT',
                
            },
            {
                streetId: 2,
                detectionDateTime: 1588698488684,
                detectionKilometer: 1,
                detectionLatitude: -5.930535,
                detectionLongitude: 37.342912,
                direction: 'DESCENDENT',
                
            },
            {
                streetId: 2,
                detectionDateTime: 1588698487684,
                detectionKilometer: 6,
                detectionLatitude: -5.930535,
                detectionLongitude: 37.342912,
                direction: 'ASCENDENT',
                
            },
            {
                streetId: 2,
                detectionDateTime: 1588698486684,
                detectionKilometer: 3,
                detectionLatitude: -5.930535,
                detectionLongitude: 37.342912,
                direction: 'DESCENDENT',
                
            },
            {
                streetId: 2,
                detectionDateTime: 1588698485684,
                detectionKilometer: 7,
                detectionLatitude: -5.930535,
                detectionLongitude: 37.342912,
                direction: 'ASCENDENT',
                
            },
        ];

        let indexName = 'street~kilometer'



        for (let i = 0; i < detections.length; i++) {
            detections[i].docType = 'detection';
            await ctx.stub.putState('DETECTION' + i, Buffer.from(JSON.stringify(detections[i])));
            console.info('Added <--> ', detections[i]);
        }*/
        console.info('============= END : Initialize Ledger ===========');
    }


    async queryAllDetections(ctx) {
        const startKey = 'DETECTION0';
        const endKey = 'DETECTION99999999999999999';
        const allResults = [];
        for await (const {key, value} of ctx.stub.getStateByRange(startKey, endKey)) {
            const strValue = Buffer.from(value).toString('utf8');
            let record;
            try {
                record = JSON.parse(strValue);
            } catch (err) {
                console.log(err);
                record = strValue;
            }
            allResults.push({ Key: key, Record: record });
        }
        console.info(allResults);
        return JSON.stringify(allResults);
    }
    async queryAllFlows(ctx) {
        const startKey = 'CARFLOW0';
        const endKey = 'CARFLOW9999999999999999';
        const allResults = [];
        for await (const {key, value} of ctx.stub.getStateByRange(startKey, endKey)) {
            const strValue = Buffer.from(value).toString('utf8');
            let record;
            try {
                record = JSON.parse(strValue);
            } catch (err) {
                console.log(err);
                record = strValue;
            }
            allResults.push({ Key: key, Record: record });
        }
        console.info(allResults);
        return JSON.stringify(allResults);
    }

    async queryAllSensorsInRange(ctx, numberSensors) {
        const startKey = 'SENSOR1';
        const endKey = 'SENSOR'+(parseInt(numberSensors)+1);
        const allResults = [];
        for await (const {key, value} of ctx.stub.getStateByRange(startKey, endKey)) {
            const strValue = Buffer.from(value).toString('utf8');
            let record;
            try {
                record = JSON.parse(strValue);
            } catch (err) {
                console.log(err);
                record = strValue;
            }
            allResults.push({ Key: key, Record: record });
        }
        console.info(allResults);
        return JSON.stringify(allResults);
    }

    async createDetection(ctx, numberSensor, detectionNumber, sensorKilometer, direction, numberCars) {
        let detectionDateTime = Date.now();
        let sensor = parseInt(numberSensor)
        const detection = {
            sensor,
            docType: 'detection',
            detectionDateTime,
            numberCars,
            sensorKilometer
        };

        // Añadir la resolución a los datos y cambiar de zona a unico punto, hacer el flujo en cuanto a cada sensor junto con un agregador
    
        if(direction === 'ascendent'){
            detection.direction = 'ASCENDENT';
        }else{
            detection.direction = 'DESCENDENT';
        }

        await ctx.stub.putState(detectionNumber, Buffer.from(JSON.stringify(detection)));
    }
    
    async calculateFlow(ctx, calculationNumber, streetId, fromDate, numberSensors) {
        let totalBeginHR = process.hrtime();
        let totalBegin = totalBeginHR[0] * 1000000 + totalBeginHR[1] / 1000;
        let toDate = Date.now();

        let res = [];
        let bySection = [];
        let totalDetections = 0;
        let total = 0;
        for(let j=1; j<=numberSensors; j++){
            res.push(await this.queryCalculate(ctx, fromDate, toDate, j));
            let detections = await JSON.parse(res[j-1].toString());
            let numberCars = 0;
            for(let i=0; i< detections.length; i++){
                numberCars +=  parseInt(detections[i].Record.numberCars);
            }
            bySection.push(parseFloat(((numberCars *1000) /  (toDate - fromDate)).toFixed(3)));
            total += parseFloat(((numberCars *1000) /  (toDate - fromDate)).toFixed(3));
            totalDetections += numberCars;
        }
        
        const carFlow = {
            streetId,
            docType: 'carflow',
            dateFlow: {
                fromDate,
                toDate
            },
            carsPerSecond: {
                bySection,
                total: total/numberSensors
            },
            totalDetections
        };

        await ctx.stub.putState(calculationNumber, Buffer.from(JSON.stringify(carFlow)));

        let totalEndHR = process.hrtime()
        let totalEnd = totalEndHR[0] * 1000000 + totalEndHR[1] / 1000;
        let totalDuration = (totalEnd - totalBegin) / 1000;

        let event = {
            totalDetections: totalDetections,
            type: 'calculateFlow',
            execDuration: totalDuration,
            carsPerSecondSection: bySection,
            carsPerSecondTotal: total/numberSensors

        };
        await ctx.stub.setEvent('FlowEvent', Buffer.from(JSON.stringify(event)));
    }
    
    async queryDetectionsInRange(ctx,startDate, endDate) {
    
        const allResults = [];
        for await (const {key, value} of ctx.stub.getStateByRange(startDate, endDate)) {
            const strValue = Buffer.from(value).toString('utf8');
            let record;
            try {
                record = JSON.parse(strValue);
            } catch (err) {
                console.log(err);
                record = strValue;
            }
            allResults.push({ Key: key, Record: record });
        }
        console.info(allResults);
        return JSON.stringify(allResults);
    }
    
    async queryCalculate(ctx, fromDate, toDate, numberSensor) {
    
        let queryString = `{
            "selector": {
                "sensor": {
                    "$eq": ${numberSensor}
                },
                "detectionDateTime": {
                    "$lte": ${toDate}, 
                    "$gte": ${fromDate}
                }
            }
        }`;
        return this.queryWithQueryString(ctx, queryString);
    
    }

    async querySensor(ctx, numberSensor) {
    
        let queryString = `{
            "selector": {
                "numberSensor": {
                    "$eq": ${numberSensor}
                }
            }
        }`;
        return this.queryWithQueryString(ctx, queryString);
    
    }

    async createSensor(ctx, numberSensor) {
        
    
        const sensor = {
            numberSensor: parseInt(numberSensor),
            detections: [],
        };
    
        await ctx.stub.putState('SENSOR'+numberSensor, Buffer.from(JSON.stringify(sensor)));
    }

    async createDetectionSensor(ctx, numberSensor, detections, timeData, frequency) {
        let s = await this.querySensor(ctx, parseInt(numberSensor));
        let sensor = JSON.parse(s.toString())[0];
        let det = JSON.parse(detections);
        let time = Date.now();
        sensor.Record.detections = sensor.Record.detections.filter((i) => {
            return i.detectionDateTime >= (time - timeData*1000 - 10000);
        });
        for(let i = 0; i< det.length; i++){
            sensor.Record.detections.push(det[i]);
        }
        

        await ctx.stub.putState(sensor.Key, Buffer.from(JSON.stringify(sensor.Record)));

        let event = {
            type: 'detection',
            numberSensor: parseInt(numberSensor),
            timeData: timeData,
            frequency: frequency
        };
        await ctx.stub.setEvent('DetectionEvent', Buffer.from(JSON.stringify(event)));
        return event;
    }


    async calculateFlowV2(ctx, streetFlow, timeData, fromDates, numberSensors, frequency) {
        let totalBeginHR = process.hrtime();
        let totalBegin = totalBeginHR[0] * 1000000 + totalBeginHR[1] / 1000;

        let strFlow = JSON.parse(streetFlow)[0].Record;
        let frmDates = JSON.parse(fromDates);
        let sensors = [];
        let bySection = [];
        let totalDetections = 0;
        let total = 0;
        let numSens = parseInt(numberSensors);
        let totalDetectionsStored = 0;
        let totalDetectionsStoredList = [];

        let totalDetectionsEvent = [];
        let bySectionEvent = [];
        let totalEvent = [];
        if(frmDates.length > 0){

            for(let j=1; j<=numSens; j++){
                let sensor = await this.querySensor(ctx, j);
                sensors.push(JSON.parse(sensor.toString())[0]);
            }
    
            for(let k=0; k<frmDates.length; k++){
                let fromDate = frmDates[k];
                let toDate = fromDate - (1000* timeData);
                
                for(let l=0;l<sensors.length; l++){
                    totalDetectionsStored += sensors[l].Record.detections.length;

                    let detections = sensors[l].Record.detections.filter((i) => {
                        return parseInt(fromDate) >= i.detectionDateTime && i.detectionDateTime >= parseInt(toDate);
                    });
                    let numberCars = 0;
                    for(let i=0; i< detections.length; i++){
                        numberCars +=  parseInt(detections[i].numberCars);
                    }
                    bySection.push(parseFloat(((numberCars *1000) /  (fromDate - toDate)).toFixed(3)));
                    total += parseFloat(((numberCars *1000) /  (fromDate - toDate)).toFixed(3));
                    totalDetections += numberCars;
                }
                totalDetectionsStoredList.push(totalDetectionsStored);
                bySectionEvent.push(bySection);
                totalEvent.push(total/numberSensors);
                totalDetectionsEvent.push(totalDetections);
                let carFlow = {
                    streetId: strFlow.streetId,
                    dateFlow: {
                        fromDate: parseInt(fromDate),
                        toDate: parseInt(toDate)
                    },
                    carsPerSecond: {
                        bySection,
                        total: total/numSens
                    },
                    totalDetections,
                };
                if(totalDetections > 0){
                    strFlow.flows.push(carFlow);
                }
                bySection = [];
                totalDetections = 0;
                total = 0;
                totalDetectionsStored = 0;
            }
            
            if(strFlow.flows.length > 0){
                await ctx.stub.putState('STREETFLOWS' + strFlow.streetId, Buffer.from(JSON.stringify(strFlow)));
            }


        }
        let totalEndHR = process.hrtime()
        let totalEnd = totalEndHR[0] * 1000000 + totalEndHR[1] / 1000;
        let totalDuration = (totalEnd - totalBegin) / 1000;

        if (frmDates.length == 0){
            totalDuration = 0;
        }
        let event = {
            totalDetections: totalDetectionsEvent,
            type: 'calculateFlow',
            execDuration: totalDuration,
            carsPerSecondSection: bySectionEvent,
            carsPerSecondTotal: totalEvent,
            timeData: timeData,
            frequencyData: frequency,
            totalDetectionsStoredList: totalDetectionsStoredList

        };
        await ctx.stub.setEvent('FlowEvent', Buffer.from(JSON.stringify(event)));
        return event;
    }


    async monitorTime(ctx, timeData, calculateTime, maxCalculateTime, minCalculateTime) {
        
        if(parseInt(calculateTime) >= parseInt(maxCalculateTime)*0.9){
            return JSON.parse(parseInt(timeData)*0.75);
        }else if(parseInt(calculateTime) <= parseInt(minCalculateTime)*1.1){
            return JSON.parse(parseInt(timeData)*1.25);
        }else{
            return JSON.parse(timeData);
        }
    
    }

    async monitorFrequency(ctx, frequency, calculateTime, maxCalculateTime, minCalculateTime) {
        
        if(parseFloat(calculateTime) >= parseFloat(maxCalculateTime)*0.9){
            return JSON.parse(parseFloat(frequency)*1.25);
        }else if(parseFloat(calculateTime) <= parseFloat(minCalculateTime)*1.1){
            return JSON.parse(parseFloat(frequency)*0.75);
        }else{
            return JSON.parse(frequency);
        }
    
    }

    async orquestator(ctx, numberSensors, streetKilometers, minutes, dataFrequency, timeData, maxCalculationTime, minCalculationTime,
         frequencyControlCalculate, experimentNumber, frequency) {
        
        let velocities = [31,54,48,62,39,63,38,39,51,65,53,36,45,50,56,67,68,67,40,45,58,57,67,60,40,45,43,60,56,50,51,31,43,63,41,40,67,47,38,36,65,42,38,40,33,53,40,69,30,60,51,67,43,38,53,68,48,57,52,41,60,30,42,63,44,48,68,60,47,63,54,58,60,45,48,48,65,68,53,64,57,67,35,30,38,37,62,37,59,41,60,63,63,46,56,66,40,62,58,32,37,32,62,33,43,63,43,68,55,48,68,52,54,54,38,35,43,37,45,48,62,37,55,50,37,64,49,37,44,48,35,51,47,69,51,40,63,36,60,44,46,58,53,57,49,42,51,36,42,55,68,41,37,38,42,37,60,57,41,52,54,57,62,47,44,41,55,44,34,31,31,54,68,50,41,52,67,47,44,31,56,57,44,67,57,48,53,48,54,36,64,45,69,65,31,63,37,46,58,44,61,37,60,58,49,40,68,36,55,68,38,41,37,62,32,62,43,43,36,45,60,39,56,54,45,53,40,42,49,52,45,54,53,54,61,55,64,66,37,56,59,68,60,45,69,57,57,39,53,49,58,50,46,66,30,53,53,54,52,40,62,56,33,34,54,55,64,30,46,65,45,31,54,41,65,63,42,48,61,42,56,40,59,43,61,62,43,32,47,66,46,58,58,61,45,52,46,42,52,54,68,40,59,30,49,32,41,67,50,62,60,47,52,35,56,47,39,59,66,62,33,35,36,53,55,52,60,31,40,48,34,43,34,50,57,43,55,33,35,35,50,53,46,60,55,41,34,62,46,38,45,56,32,69,31,55,51,50,34,51,33,56,47,38,58,67,38,53,62,53,35,59,58,64,50,30,52,63,39,38,36,40,69,39,52,64,36,52,57,58,59,40,48,68,38,59,59,44,45,31,68,47,30,59,58,64,62,32,32,49,34,33,35,34,67,65,34,51,33,52,60,59,60,69,52,63,55,68,44,64,37,30,49,44,48,30,40,53,62,34,50,42,41,40,66,35,66,46,58,58,36,52,59,48,43,54,67,59,59,31,63,53,56,62,63,32,45,57,43,42,33,68,54,39,57,55,64,66,66,40,59,42,37,46,39,42,53,43,35,45,37,61,59,51,61,56,43,39,67,64,61,47,44,45,44,67,58,51,48,51,40,51,53,45,40,61,41,64,48,44,42,34,60,55,58,33,53,40,55,39,68,68,57,51,34,63,61,44,38,32,62,69,61,40,60,59,65,61,44,33,46,63,36,64,64,47,44,32,56,58,65,51,51,55,39,33,56,57,48,61,68,33,62,45,55,42,66,40,45,31,66,47,32,35,48,52,32,66,64,61,54,47,30,42,60,55,48,64,44,61,68,49,32,64,52,67,41,54,47,55,40,34,43,41,67,51,57,35,49,60,63,42,46,51,45,68,35,49,34,36,59,41,50,42,55,45,33,35,51,39,40,68,34,60,57,57,59,37,51,43,49,36,45,48,44,51,46,32,44,54,58,48,66,43,35,58,55,61,69,62,55,69,31,59,38,30,49,69,50,47,44,61,51,43,49,42,68,49,50,54,67,40,56,58,55,50,54,54,47,50,63,67,36,44,66,38,37,49,44,66,61,59,61,48,56,54,67,43,62,47,36,62,48,54,50,60,41,51,42,56,31,33,40,43,63,43,48,57,64,61,39,39,68,39,52,33,63,53,45,68,48,43,57,60,38,56,45,56,66,51,62,49,45,43,57,31,52,46,45,53,38,54,69,37,46,64,56,36,37,41,67,36,55,39,66,66,55,47,49,47,38,48,39,55,47,43,63,67,55,36,67,33,35,59,66,50,58,61,58,63,52,51,54,41,32,56,56,52,36,43,68,43,55,55,58,46,60,60,34,55,59,69,47,58,47,69,50,64,50,60,31,62,65,38,64,47,49,53,38,49,62,35,40,39,39,39,44,60,33,
            69,59,56,49,52,37,56,61,55,41,61,54,67,30,56,36,66,44,47,48,43,68,59,31,60,36,63,56,57,65,50,60,62,56,36,40,67,41,42,36,37,65,44,33,32,31,34,46,61,40,59,59,54,53,39,35,34,56,62,57,34,46,63,63,46,61,49,58,45,35,30,52,58,57,61,40,41,58,57,64,63,39,30,49,32,49,52,61,53,44,41,55,57,65,33,58,62,36,58,39,59,40,31,48,33,64,55,52,64,37,48,58,47,57,34,56,52,53,39,67,55,60,55,53,33,39,60,69,50,32,66,37,53,67,35,46,46,47,68,56,45,69,54,59,55,66,68,63,47,43,67,48,67,68,66,65,43,44,56,52,48,47,52,38,40,58,62,62,54,54,32,55,63,49,34,53,51,52,51,37,54,42,52,64,60,34,44,55,59,33,41,67,44,54,51,33,44,46,50,36,36,40,31,38,30,51,65,47,53,43,67,69,37,69,55,48,61,32,38,44,67,
    39,39,52,51,36,57,39,60,60,51,52,50,35,58,30,54,50,39,60,57,39,63,57,57,65,41,41,55,44,64,58,45,41,58,40,54,40,59,44,32,32,56,42,33,30,41,42,31,67,34,44,49,34,52,55,56,52,47,51,37,34,47,37,45,57,46,45,65,47,60,38,43,39,65,39,33,43,38,49,41,64,53,60,45,60,53,50,55,56,49,44,37,51,69,41,52,59,47,55,61,57,41,43,61,39,69,52,66,66,45,56,36,46,51,48,58,46,62,39,54,63,66,45,39,50,56,39,52,31,60,34,54,58,62,44,48,59,38,61,66,67,66,40,50,42,66,68,31,48,34,67,64,37,39,36,39,55,64,56,48,64,64,68,43,57,53,36,50,45,53,59,49,43,38,60,48,48,68,39,33,35,39,44,69,62,62,42,38,55,62,50,49,63,45,49,53,59,31,58,43,38,33,46,40,66,57,54,63,63,40,62,62,39,66,59,45,55,41,40,64,45,46,50,40,46,53,57,66,50,54,59,46,66,45,38,61,39,64,32,41,41,41,30,58,69,31,55,55,66,48,42,34,56,56,33,37,44,57,59,57,46,53,56,48,52,30,45,34,37,44,52,67,69,30,55,53,39,40,42,57,45,53,30,53,48,36,34,30,42,60,50,60,32,37,34,31,30,40,39,58,67,60,35,64,53,40,32,39,35,57,58,40,64,44,63,43,53,34,63,49,45,53,40,56,36,62,61,46,50,53,45,52,36,46,49,37,32,47,50,36,47,38,55,67,36,39,46,35,48,53,50,36,52,58,53,58,59,33,52,68,68,50,55,60,47,53,36,35,46,67,42,43,32,46,39,47,56,57,51,54,39,43,41,58,38,63,62,43,40,61,30,50,40,69,43,52,47,59,53,48,31,45,34,38,37,61,51,45,37,58,41,67,66,41,48,38,47,36,36,43,39,45,69,68,44,60,48,55,45,60,49,48,63,45,61,68,41,49,56,50,38,48,53,65,66,68,69,58,41,38,56,69,50,68,51,59,46,59,68,37,61,50,30,36,37,47,36,34,67,55,40,50,65,53,46,64,31,48,53,48,38,49,36,65,57,66,54,67,49,58,59,63,41,31,51,33,67,48,37,35,45,48,58,39,35,56,63,51,48,51,61,32,39,51,30,59,61,51,44,36,64,63,43,56,49,59,38,42,47,52,46,35,57,42,36,44,38,50,55,69,56,62,43,58,32,54,57,50,68,43,69,55,45,39,59,43,46,48,43,62,35,41,48,65,40,46,50,50,39,46,49,47,47,54,60,32,59,64,34,52,58,46,51,39,34,57,35,40,38,49,50,65,50,43,36,68,62,30,62,48,43,30,55,42,37,58,35,44,58,47,39,46,37,45,59,51,37,47,57,51,61,68,34,38,69,36,49,40,56,53,64,50,65,54,63,41,57,61,66,50,34,45,49,49,53,49,52,52,39,59,66,53,50,67,68,66,55,39,51,32,41,60,47,41,62,64,39,63,45,63,53,56,48,55,42,53,61,45,61,45,53,58,60,53,51,32,55,57,61,38,58,45,59,31,53,56,43,59,53,34,42,43,34,47,42,47,61,52,53,32,58,30,33,38,36,59,47,50,62,36,53,48,38,43,47,68,48,56,47,45,49,30,62,63,65,32,50,38,34,37,31,46,61,35,64,38,62,50,45,55,55,60,55,36,54,65,33,59,64,37,53,56,30,33,57,55,52,45,36,53,65,62,46,44,63,46,43,50,69,48,41,42,36,51,60,41,38,62,49,51,53,37,61,61,45,41,41,69,66,38,38,39,56,56,68,53,69,47,58,58,38,35,57,42,55,48,35,58,33,47,64,40,68,33,60,41,40,37,35,33,69,37,43,54,49,36,52,64,63,49,44,53,42,41,62,50,37,50,47,42,51,48,34,63,61,46,50,47,56,39,36,55,51,46,56,40,57,
    48,54,54,48,63,46,41,61,49,40,45,45,51,46,44,64,69,51,46,43,36,48,50,34,41,50,40,51,55,41,63,47,47,42,62,51,33,31,55,31,45,65,38,65,53,51,34,53,54,56,61,61,62,57,64,60,57,54,39,53,37,69,37,34,31,50,36,39,46,58,69,59,65,57,56,37,57,33,47,42,63,67,38,57,56,42,52,66,49,45,42,62,67,62,57,42,39,54,62,33,36,46,59,45,39,67,38,39,40,56,66,69,49,62,52,50,34,64,69,65,58,57,49,36,54,68,32,46,40,31,52,36,34,43,50,62,34,43,45,50,63,35,57,35,69,47,35,60,44,56,37,47,47,57,44,64,53,56,52,56,36,33,32,43,39,41,60,51,40,34,62,45,41,30,40,33,65,64,35,58,63,49,51,63,52,59,46,55,61,63,59,48,48,30,49,39,47,64,33,57,45,62,63,33,34,54,49,33,45,47,56,59,
    60,52,52,50,68,48,35,52,66,41,64,65,47,49,31,41,51,35,49,34,38,55,42,45,56,54,63,53,34,56,37,46,42,53,66,51,43,34,37,63,31,64,61,68,64,67,43,63,45,37,52,32,38,63,48,67,45,43,53,69,33,55,39,53,51,40,69,54,62,36,68,51,46,37,68,39,45,51,66,33,49,43,61,55,44,52,58,44,52,69,49,44,58,43,63,46,49,59,61,51,66,56,62,36,52,39,35,67,63,58,54,56,41,31,41,56,39,35,68,47,50,33,45,33,54,37,68,46,57,36,37,67,62,56,47,47,55,55,52,45,41,61,60,37,69,45,42,64,40,69,36,53,45,57,68,48,30,43,66,60,30,36,58,57,62,69,51,31,66,34,51,58,33,47,52,40,31,40,46,44,56,43,66,60,68,39,34,68,53,36,40,69,58,40,37,33,68,52,41,32,65,66,30,58,30,68,30,66,69,49,42,40,39,64,44,40,39,59,30,48,68,60,45,64,59,60,40,40,54,54,52,49,44,61,32,34,48,57,52,48,55,47,47,56,68,30,44,40,58,41,43,47,44,38,53,58,57,64,49,34,41,48,54,50,45,41,50,54,48,64,60,58,56,61,49,41,47,57,57,47,48,36,55,62,43,44,44,69,32,54,45,67,66,57,48,37,68,46,56,38,65,54,48,50,53,63,50,53,47,56,51,37,36,60,52,64,60,35,49,67,49,66,38,44,41,37,31,51,66,36,44,69,50,55,60,54,63,48,68,58,57,65,60,65,33,54,56,41,44,68,47,51,37,44,63,37,54,56,60,52,38,36,67,42,36,59,52,59,43,65,49,43,65,66,34,51,36,46,53,60,69,37,50,52,66,63,52,57,40,54,37,49,66,41,36,60,32,64,54,54,49,59,43,38,49,36,54,34,64,37,42,57,61,47,68,52,60,55,30,60,31,69,67,34,68,42,69,50,46,42,36,64,56,35,36,48,59,65,56,66,37,58,38,51,62,44,38,62,49,48,64,53,39,55,60,42,63,37,42,50,38,64,62,59,45,55,37,62,40,37,58,40,66,33,34,34,38,59,50,46,60,63,69,61,38,57,35,34,56,34,35,57,58,69,55,63,30,56,45,41,38,62,32,63,46,52,67,36,33,38,47,56,30,61,46,66,39,30,53,64,64,36,45,42,51,39,35,30,47,51,40,35,57,39,62,56,69,60,40,60,56,69,48,47,67,52,56,50,58,43,43,53,56,43,54,39,34,50,38,44,47,62,64,47,52,69,64,43,50,53,33,56,65,35,35,63,34,49,52,50,58,41,42,56,34,42,44,62,52,32,60,55,66,52,58,47,58,56,62,48,31,58,61,38,52,52,58,46,37,49,59,51,50,31,65,40,40,63,47,45,65,45,60,66,34,46,32,54,40,34,63,69,68,35,52,65,33,68,50,67,40,30,51,42,58,49,33,35,68,64,55,36,66,37,49,47,34,56,31,44,55,61,47,31,50,45,67,63,46,52,53,31,62,33,56,42,64,34,33,66,58,42,66,51,57,45,59,54,68,54,50,42,67,61,44,45,54,62,42,41,51,58,40,64,59,42,48,65,53,47,52,39,57,56,35,53,43,48,57,54,56,59,68,37,63,35,52,68,42,69,59,67,69,44,43,51,50,30,41,48,58,60,64,45,48,43,62,39,65,42,46,53,62,31,42,33,47,64,50,30,31,34,67,44,35,36,50,48,30,63,59,39,54,65,57,31,45,48,42,63,49,32,65,57,39,37,49,51,50,46,46,53,48,50,51,48,40,53,48,48,43,32,58,69,66,58,30,40,59,58,59,42,43,44,48,41,35,63,58,42,51,32,61,66,52,33,40,54,64,64,69,44,43,37,66,52,49,36,54,65,35,42,61,50,44,58,58,43,46,35,65,46,35,38,33,69,44,44,52,69,55,56,54,50,57,58,50,
    60,38,54,48,41,48,64,62,67,56,59,41,58,69,39,56,36,40,66,55,40,64,41,44,33,32,41,60,62,54,43,59,68,60,42,63,62,51,48,53,56,48,42,47,36,54,50,42,52,36,47,41,41,53,50,30,38,49,34,50,30,43,69,64,47,62,32,49,52,36,51,34,57,34,63,66,58,51,49,36,58,59,48,36,33,59,58,39,57,54,69,60,47,58,64,50,37,51,47,53,61,47,61,64,33,61,38,63,38,55,40,32,56,40,54,34,57,53,68,41,32,36,39,51,41,32,42,64,47,50,48,61,59,54,41,34,52,48,39,39,47,46,59,57,56,47,48,48,53,49,43,68,40,39,51,42,65,30,42,30,42,31,64,46,37,55,49,39,61,63,40,55,52,54,40,54,33,44,53,37,46,45,50,57,48,43,50,45,37,31,34,52,68,46,59,68,41,36,44,34,41,36,42,32,55,43,56,61,32,37,68,67,
    35,45,64,44,48,63,50,60,53,34,52,30,52,54,59,62,30,48,40,50,48,36,64,35,46,66,41,45,51,50,46,62,50,37,60,35,47,59,39,37,46,55,69,55,61,41,64,33,40,61,41,60,35,37,60,33,49,34,57,67,66,64,66,39,48,34,53,31,45,57,67,45,66,46,46,44,36,64,31,44,62,64,66,37,33,62,40,41,34,37,61,34,49,54,45,56,39,50,38,64,59,33,37,39,44,37,37,67,53,56,49,51,33,46,47,54,39,48,52,58,40,64,64,45,56,60,41,31,35,49,44,33,42,53,45,35,54,47,46,42,65,37,62,59,41,48,54,48,48,60,45,33,50,32,67,49,32,51,59,57,39,55,68,56,32,45,39,38,60,46,48,40,38,62,30,67,64,67,56,43,59,44,61,49,41,58,42,46,47,64,56,43,30,59,59,42,65,30,61,67,43,46,48,46,60,32,64,38,46,35,68,64,49,42,59,42,61,33,52,47,45,49,54,55,46,61,46,33,40,54,39,31,57,55,39,49,32,58,43,52,48,34,50,33,62,62,34,36,66,64,56,68,61,55,39,65,40,30,35,65,44,63,43,50,53,49,35,52,61,35,65,32,61,54,58,46,36,35,43,45,65,39,31,59,57,44,53,54,67,57,69,51,60,30,45,57,52,54,47,38,60,37,37,40,54,31,48,46,41,66,40,50,45,52,64,59,56,46,58,53,36,57,66,32,41,52,43,65,52,39,65,31,56,39,50,62,56,35,46,64,32,38,59,42,48,69,39,49,50,60,45,39,66,61,60,63,49,53,36,67,52,30,64,66,40,30,59,63,62,49,67,34,62,54,50,61,62,41,43,45,30,58,59,37,48,32,38,39,30,46,39,33,45,47,52,48,36,52,52,57,55,30,69,42,52,60,44,66,46,57,37,58,52,44,64,54,38,43,50,63,65,57,62,60,64,46,45,40,41,57,39,39,38,39,50,33,39,54,56,50,64,39,51,38,63,37,64,48,40,63,48,53,46,48,49,62,51,35,62,59,37,40,69,53,39,60,52,67,36,51,57,53,51,57,62,64,62,38,39,38,41,52,58,47,46,65,38,33,37,38,44,60,61,60,62,51,32,68,48,55,56,32,53,62,55,63,41,31,63,69,60,31,51,50,36,49,68,49,50,55,55,33,35,54,35,61,42,35,52,32,37,59,41,56,52,64,66,50,33,66,62,57,39,61,60,32,52,58,51,55,54,44,57,37,59,38,64,44,43,37,54,32,60,38,56,56,62,60,53,50,64,50,47,51,32,62,66,47,55,67,64,51,68,64,52,67,55,44,42,40,58,33,50,32,60,43,45,69,31,55,31,47,67,38,61,66,31,57,35,34,43,51,53,31,47,38,37,62,60,51,56,33,46,63,59,58,46,65,41,57,45,67,69,54,69,43,64,34,48,41,45,52,65,68,52,41,66,34,32,43,53,57,60,50,65,60,49,41,58,56,42,61,43,51,46,48,54,40,32,59,45,66,34,56,34,63,45,45,39,50,51,32,43,49,38,38,37,36,58,41,65,42,38,39,53,31,42,42,44,58,52,64,43,49,67,50,41,31,50,62,32,32,63,51,48,56,66,51,31,48,66,53,43,61,41,55,51,41,39,46,48,46,48,50,43,56,60,30,55,44,51,60,39,38,46,54,61,50,52,45,44,30,32,59,61,57,42,57,40,38,59,66,67,63,42,57,66,45,50,63,39,50,60,69,48,30,53,49,43,33,35,65,59,40,42,43,64,46,41,48,64,31,34,39,32,44,30,64,69,44,52,44,54,43,67,43,43,40,45,40,42,32,34,30,47,65,34,46,46,42,53,48,58,44,47,31,43,49,66,49,54,53,42,38,51,33,63,66,47,35,52,35,36,50,45,53,44,40,52,48,44,48,61,54,64,57,69,40,62,44,59,59,68,45,64,45,32,
    47,60,46,49,53,50,41,39,49,57,68,67,32,55,56,47,54,58,45,45,35,31,45,55,68,54,58,57,39,55,44,49,37,42,63,40,60,66,59,34,50,64,51,61,39,53,64,51,53,47,50,56,44,41,30,52,65,59,41,42,61,63,53,62,31,48,57,48,40,61,49,49,51,44,51,31,61,49,32,49,54,57,40,51,42,37,66,62,31,50,68,38,64,43,44,36,53,63,66,33,64,42,39,68,47,55,42,55,33,38,66,63,43,44,54,42,38,42,54,46,58,58,60,67,63,46,49,31,35,48,37,51,45,63,54,69,30,48,40,44,63,33,55,43,61,59,68,35,65,34,52,62,50,31,38,65,55,44,60,60,47,67,59,57,69,61,63,48,42,48,48,52,58,68,41,31,69,39,39,50,56,55,64,31,50,47,44,35,67,50,48,54,66,40,55,45,50,54,57,46,44,37,63,32,61,51,63,69,37,55,38,69,
    50,30,67,46,47,53,31,47,57,45,49,30,44,42,38,58,47,50,56,59,51,31,38,69,43,61,63,66,30,60,44,40,54,55,57,65,44,53,43,37,30,52,52,30,57,46,64,37,45,61,31,52,33,38,68,65,31,36,50,49,60,50,65,45,35,47,44,53,35,62,52,49,49,64,61,57,36,59,39,37,63,43,58,34,43,67,53,49,41,56,63,49,41,44,59,57,46,40,52,48,32,58,61,50,49,37,60,59,40,41,46,49,32,63,51,40,45,60,34,32,54,56,59,51,61,44,37,65,54,54,53,38,55,55,42,42,62,53,50,40,50,65,65,67,66,40,33,64,44,49,45,61,45,56,49,31,43,48,35,50,48,68,64,49,40,35,61,57,37,61,31,58,45,50,67,61,60,66,37,46,37,55,64,68,46,40,45,33,64,52,36,69,34,47,45,40,45,42,30,56,35,57,47,63,49,30,33,59,51,56,65,40,61,63,46,57,46,48,43,51,34,49,59,43,30,59,38,63,40,31,62,40,40,55,47,46,56,63,61,62,56,41,40,53,56,58,42,58,35,34,61,59,32,52,51,40,36,36,46,64,54,51,36,68,38,59,35,50,60,56,41,40,56,37,51,44,42,46,60,65,40,47,41,35,43,52,59,54,54,35,50,32,41,48,51,45,67,59,49,58,45,33,45,47,51,60,49,60,69,59,63,33,60,44,45,64,44,47,32,48,35,42,33,51,38,60,32,42,34,40,56,30,46,33,52,56,40,62,41,42,59,54,53,44,39,67,57,42,47,57,54,55,67,44,61,44,30,51,51,40,47,37,56];

        let timeStart = [-72000,-71359,-70718,-70077,-69436,-68795,-68154,-67513,-66872,-66231,-65590,-64949,-64308,-63667,-63026,-62385,-61744,-61103,-60462,-59821,-59179,-58538,-57897,-57256,-56615,-55974,-55333,-54692,-54051,-53410,-52769,-52128,-51487,-50846,-50205,-49564,-48923,-48282,-47641,-47000,-46359,-45718,-45077,-44436,-43795,-43154,-42513,-41872,-41231,-40590,-39949,-39308,-38667,-38026,-37385,-36744,-36103,-35462,-34821,-34179,-33538,-32897,-32256,-31615,-30974,-30333,-29692,-29051,-28410,-27769,-27128,-26487,-25846,-25205,-24564,-23923,-23282,-22641,-22000,-21359,-20718,-20077,-19436,-18795,-18154,-17513,-16872,-16231,-15590,-14949,-14308,-13667,-13026,-12385,-11744,-11103,-10462,-9821,-9179,-8538,-7897,-7256,-6615,-5974,-5333,-4692,-4051,-3410,-2769,-2128,-1487,-846,-205,436,1077,1718,2359,3000,3641,4282,4923,5564,6205,6846,7487,8128,8769,9410,10051,10692,11333,11974,12615,13256,13897,14538,15179,15821,16462,17103,17744,18385,19026,19667,20308,20949,21590,22231,22872,23513,24154,24795,25436,26077,26718,27359,28000,28641,29282,29923,30564,31205,31846,32487,33128,33769,34410,35051,35692,36333,36974,37615,38256,38897,39538,40179,40821,41462,42103,42744,43385,44026,44667,45308,45949,46590,47231,47872,48513,49154,49795,50436,51077,51718,52359,53000,53641,54282,54923,55564,56205,56846,57487,58128,58769,59410,60051,60692,61333,61974,62615,63256,63897,64538,65179,65821,66462,67103,67744,68385,69026,69667,70308,70949,71590,72231,72872,73513,74154,74795,75436,76077,76718,77359,78000,78641,79282,79923,80564,81205,81846,82487,83128,83769,84410,85051,85692,86333,86974,87615,88256,88897,89538,90179,90821,91462,92103,92744,93385,94026,94667,95308,95949,96590,97231,97872,98513,99154,99795,100436,101077,101718,102359,103000,103641,104282,104923,105564,106205,106846,107487,108128,108769,109410,110051,110692,111333,111974,112615,113256,113897,114538,115179,115821,116462,117103,117744,118385,119026,119667,120308,120949,121590,122231,122872,123513,124154,124795,125436,126077,126718,127359,128000,128641,129282,129923,130564,131205,131846,132487,133128,133769,134410,135051,135692,136333,136974,137615,138256,138897,139538,140179,140821,141462,142103,142744,143385,144026,144667,145308,145949,146590,147231,147872,148513,149154,149795,150436,151077,151718,152359,153000,153641,154282,154923,155564,156205,156846,157487,158128,158769,159410,160051,160692,161333,161974,162615,163256,163897,164538,165179,165821,166462,167103,167744,168385,169026,169667,170308,170949,171590,172231,172872,173513,174154,174795,175436,176077,176718,177359,178000,178641,179282,179923,180564,
            181205,181846,182487,183128,183769,184410,185051,185692,186333,186974,187615,188256,188897,189538,190179,190821,191462,192103,192744,193385,194026,194667,195308,195949,196590,197231,197872,198513,199154,199795,200436,201077,201718,202359,203000,203641,204282,204923,205564,206205,206846,207487,208128,208769,209410,210051,210692,211333,211974,212615,213256,213897,214538,215179,215821,216462,217103,217744,218385,219026,219667,220308,220949,221590,222231,222872,223513,224154,224795,225436,226077,226718,227359,228000,228641,229282,229923,230564,231205,231846,232487,233128,233769,234410,235051,235692,236333,236974,237615,238256,238897,239538,240179,240821,241462,242103,242744,243385,244026,244667,245308,245949,246590,247231,247872,248513,249154,249795,250436,251077,251718,252359,253000,253641,254282,254923,255564,256205,256846,257487,258128,258769,259410,260051,260692,261333,261974,262615,263256,263897,264538,265179,265821,266462,267103,267744,268385,269026,269667,270308,270949,271590,272231,272872,273513,274154,274795,275436,276077,276718,277359,278000,278641,279282,279923,280564,281205,281846,282487,283128,283769,284410,285051,285692,286333,286974,287615,288256,288897,289538,290179,290821,291462,292103,292744,293385,294026,294667,295308,295949,296590,297231,297872,298513,299154,299795,300436,301077,301718,302359,303000,303641,304282,304923,305564,306205,306846,307487,308128,308769,309410,310051,310692,311333,311974,312615,313256,313897,314538,315179,315821,316462,317103,317744,318385,319026,319667,320308,320949,321590,322231,322872,323513,324154,324795,325436,326077,326718,327359,328000,328641,329282,329923,330564,331205,331846,332487,333128,333769,334410,335051,335692,336333,336974,337615,338256,338897,339538,340179,340821,341462,342103,342744,343385,344026,344667,345308,345949,346590,347231,347872,348513,349154,349795,350436,351077,351718,352359,353000,353641,354282,354923,355564,356205,356846,357487,358128,358769,359410,360051,360692,361333,361974,362615,363256,363897,364538,365179,365821,366462,367103,367744,368385,369026,369667,370308,370949,371590,372231,372872,373513,374154,374795,375436,376077,376718,377359,378000,378641,379282,379923,380564,381205,381846,382487,383128,383769,384410,385051,385692,386333,386974,387615,388256,388897,389538,390179,390821,391462,392103,392744,393385,394026,394667,395308,395949,396590,397231,397872,398513,399154,399795,400436,401077,401718,402359,403000,403641,404282,404923,405564,406205,406846,407487,408128,408769,409410,410051,410692,411333,411974,412615,413256,413897,414538,415179,415821,416462,
            417103,417744,418385,419026,419667,420308,420949,421590,422231,422872,423513,424154,424795,425436,426077,426718,427359,428000,428641,429282,429923,430564,431205,431846,432487,433128,433769,434410,435051,435692,436333,436974,437615,438256,438897,439538,440179,440821,441462,442103,442744,443385,444026,444667,445308,445949,446590,447231,447872,448513,449154,449795,450436,451077,451718,452359,453000,453641,454282,454923,455564,456205,456846,457487,458128,458769,459410,460051,460692,461333,461974,462615,463256,463897,464538,465179,465821,466462,467103,467744,468385,469026,469667,470308,470949,471590,472231,472872,473513,474154,474795,475436,476077,476718,477359,478000,478641,479282,479923,480564,481205,481846,482487,483128,483769,484410,485051,485692,486333,486974,487615,488256,488897,489538,490179,490821,491462,492103,492744,493385,494026,494667,495308,495949,496590,497231,497872,498513,499154,499795,500436,501077,501718,502359,503000,503641,504282,504923,505564,506205,506846,507487,508128,508769,509410,510051,510692,511333,511974,512615,513256,513897,514538,515179,515821,516462,517103,517744,518385,519026,519667,520308,520949,521590,522231,522872,523513,524154,524795,525436,526077,526718,527359,528000,528214,528427,528641,528855,529068,529282,529496,529709,529923,530137,530350,530564,530778,530991,531205,531419,531632,531846,532060,532274,532487,532701,532915,533128,533342,533556,533769,533983,534197,534410,534624,534838,535051,535265,535479,535692,535906,536120,536333,536547,536761,536974,537188,537402,537615,537829,538043,538256,538470,538684,538897,539111,539325,539538,539752,539966,540179,540393,540607,540821,541034,541248,541462,541675,541889,542103,542316,542530,542744,542957,543171,543385,543598,543812,544026,544239,544453,544667,544880,545094,545308,545521,545735,545949,546162,546376,546590,546803,547017,547231,547444,547658,547872,548085,548299,548513,548726,548940,549154,549368,549581,549795,550009,550222,550436,550650,550863,551077,551291,551504,551718,551932,552145,552359,552573,552786,553000,553214,553427,553641,553855,554068,554282,554496,554709,554923,555137,555350,555564,555778,555991,556205,556419,556632,556846,557060,557274,557487,557701,557915,558128,558342,558556,558769,558983,559197,559410,559624,559838,560051,560265,560479,560692,560906,561120,561333,561547,561761,561974,562188,562402,562615,562829,563043,563256,563470,563684,563897,564111,564325,564538,564752,564966,565179,565393,565607,565821,566034,566248,566462,566675,566889,567103,567316,567530,567744,567957,568171,568385,568598,568812,569026,569239,569453,
            569667,569880,570094,570308,570521,570735,570949,571162,571376,571590,571803,572017,572231,572444,572658,572872,573085,573299,573513,573726,573940,574154,574368,574581,574795,575009,575222,575436,575650,575863,576077,576291,576504,576718,576932,577145,577359,577573,577786,578000,578214,578427,578641,578855,579068,579282,579496,579709,579923,580137,580350,580564,580778,580991,581205,581419,581632,581846,582060,582274,582487,582701,582915,583128,583342,583556,583769,583983,584197,584410,584624,584838,585051,585265,585479,585692,585906,586120,586333,586547,586761,586974,587188,587402,587615,587829,588043,588256,588470,588684,588897,589111,589325,589538,589752,589966,590179,590393,590607,590821,591034,591248,591462,591675,591889,592103,592316,592530,592744,592957,593171,593385,593598,593812,594026,594239,594453,594667,594880,595094,595308,595521,595735,595949,596162,596376,596590,596803,597017,597231,597444,597658,597872,598085,598299,598513,598726,598940,599154,599368,599581,599795,600009,600222,600436,600650,600863,601077,601291,601504,601718,601932,602145,602359,602573,602786,603000,603214,603427,603641,603855,604068,604282,604496,604709,604923,605137,605350,605564,605778,605991,606205,606419,606632,606846,607060,607274,607487,607701,607915,608128,608342,608556,608769,608983,609197,609410,609624,609838,610051,610265,610479,610692,610906,611120,611333,611547,611761,611974,612188,612402,612615,612829,613043,613256,613470,613684,613897,614111,614325,614538,614752,614966,615179,615393,615607,615821,616034,616248,616462,616675,616889,617103,617316,617530,617744,617957,618171,618385,618598,618812,619026,619239,619453,619667,619880,620094,620308,620521,620735,620949,621162,621376,621590,621803,622017,622231,622444,622658,622872,623085,623299,623513,623726,623940,624154,624368,624581,624795,625009,625222,625436,625650,625863,626077,626291,626504,626718,626932,627145,627359,627573,627786,628000,628214,628427,628641,628855,629068,629282,629496,629709,629923,630137,630350,630564,630778,630991,631205,631419,631632,631846,632060,632274,632487,632701,632915,633128,633342,633556,633769,633983,634197,634410,634624,634838,635051,635265,635479,635692,635906,636120,636333,636547,636761,636974,637188,637402,637615,637829,638043,638256,638470,638684,638897,639111,639325,639538,639752,639966,640179,640393,640607,640821,641034,641248,641462,641675,641889,642103,642316,642530,642744,642957,643171,643385,643598,643812,644026,644239,644453,644667,644880,645094,645308,645521,645735,645949,646162,646376,646590,646803,647017,647231,647444,647658,647872,648085,
            648299,648513,648726,648940,649154,649368,649581,649795,650009,650222,650436,650650,650863,651077,651291,651504,651718,651932,652145,652359,652573,652786,653000,653214,653427,653641,653855,654068,654282,654496,654709,654923,655137,655350,655564,655778,655991,656205,656419,656632,656846,657060,657274,657487,657701,657915,658128,658342,658556,658769,658983,659197,659410,659624,659838,660051,660265,660479,660692,660906,661120,661333,661547,661761,661974,662188,662402,662615,662829,663043,663256,663470,663684,663897,664111,664325,664538,664752,664966,665179,665393,665607,665821,666034,666248,666462,666675,666889,667103,667316,667530,667744,667957,668171,668385,668598,668812,669026,669239,669453,669667,669880,670094,670308,670521,670735,670949,671162,671376,671590,671803,672017,672231,672444,672658,672872,673085,673299,673513,673726,673940,674154,674368,674581,674795,675009,675222,675436,675650,675863,676077,676291,676504,676718,676932,677145,677359,677573,677786,678000,678214,678427,678641,678855,679068,679282,679496,679709,679923,680137,680350,680564,680778,680991,681205,681419,681632,681846,682060,682274,682487,682701,682915,683128,683342,683556,683769,683983,684197,684410,684624,684838,685051,685265,685479,685692,685906,686120,686333,686547,686761,686974,687188,687402,687615,687829,688043,688256,688470,688684,688897,689111,689325,689538,689752,689966,690179,690393,690607,690821,691034,691248,691462,691675,691889,692103,692316,692530,692744,692957,693171,693385,693598,693812,694026,694239,694453,694667,694880,695094,695308,695521,695735,695949,696162,696376,696590,696803,697017,697231,697444,697658,697872,698085,698299,698513,698726,698940,699154,699368,699581,699795,700009,700222,700436,700650,700863,701077,701291,701504,701718,701932,702145,702359,702573,702786,703000,703214,703427,703641,703855,704068,704282,704496,704709,704923,705137,705350,705564,705778,705991,706205,706419,706632,706846,707060,707274,707487,707701,707915,708128,708342,708556,708769,708983,709197,709410,709624,709838,710051,710265,710479,710692,710906,711120,711333,711547,711761,711974,712188,712402,712615,712829,713043,713256,713470,713684,713897,714111,714325,714538,714752,714966,715179,715393,715607,715821,716034,716248,716462,716675,716889,717103,717316,717530,717744,717957,718171,718385,718598,718812,719026,719239,719453,719667,719880,720094,720308,720521,720735,720949,721162,721376,721590,721803,722017,722231,722444,722658,722872,723085,723299,723513,723726,723940,724154,724368,724581,724795,725009,725222,725436,725650,725863,726077,726291,726504,726718,
            726932,727145,727359,727573,727786,728000,728214,728427,728641,728855,729068,729282,729496,729709,729923,730137,730350,730564,730778,730991,731205,731419,731632,731846,732060,732274,732487,732701,732915,733128,733342,733556,733769,733983,734197,734410,734624,734838,735051,735265,735479,735692,735906,736120,736333,736547,736761,736974,737188,737402,737615,737829,738043,738256,738470,738684,738897,739111,739325,739538,739752,739966,740179,740393,740607,740821,741034,741248,741462,741675,741889,742103,742316,742530,742744,742957,743171,743385,743598,743812,744026,744239,744453,744667,744880,745094,745308,745521,745735,745949,746162,746376,746590,746803,747017,747231,747444,747658,747872,748085,748299,748513,748726,748940,749154,749368,749581,749795,750009,750222,750436,750650,750863,751077,751291,751504,751718,751932,752145,752359,752573,752786,753000,753214,753427,753641,753855,754068,754282,754496,754709,754923,755137,755350,755564,755778,755991,756205,756419,756632,756846,757060,757274,757487,757701,757915,758128,758342,758556,758769,758983,759197,759410,759624,759838,760051,760265,760479,760692,760906,761120,761333,761547,761761,761974,762188,762402,762615,762829,763043,763256,763470,763684,763897,764111,764325,764538,764752,764966,765179,765393,765607,765821,766034,766248,766462,766675,766889,767103,767316,767530,767744,767957,768171,768385,768598,768812,769026,769239,769453,769667,769880,770094,770308,770521,770735,770949,771162,771376,771590,771803,772017,772231,772444,772658,772872,773085,773299,773513,773726,773940,774154,774368,774581,774795,775009,775222,775436,775650,775863,776077,776291,776504,776718,776932,777145,777359,777573,777786,778000,778214,778427,778641,778855,779068,779282,779496,779709,779923,780137,780350,780564,780778,780991,781205,781419,781632,781846,782060,782274,782487,782701,782915,783128,783342,783556,783769,783983,784197,784410,784624,784838,785051,785265,785479,785692,785906,786120,786333,786547,786761,786974,787188,787402,787615,787829,788043,788256,788470,788684,788897,789111,789325,789538,789752,789966,790179,790393,790607,790821,791034,791248,791462,791675,791889,792103,792316,792530,792744,792957,793171,793385,793598,793812,794026,794239,794453,794667,794880,795094,795308,795521,795735,795949,796162,796376,796590,796803,797017,797231,797444,797658,797872,798085,798299,798513,798726,798940,799154,799368,799581,799795,800009,800222,800436,800650,800863,801077,801291,801504,801718,801932,802145,802359,802573,802786,803000,803214,803427,803641,803855,804068,804282,804496,804709,804923,805137,805350,
            805564,805778,805991,806205,806419,806632,806846,807060,807274,807487,807701,807915,808128,808342,808556,808769,808983,809197,809410,809624,809838,810051,810265,810479,810692,810906,811120,811333,811547,811761,811974,812188,812402,812615,812829,813043,813256,813470,813684,813897,814111,814325,814538,814752,814966,815179,815393,815607,815821,816034,816248,816462,816675,816889,817103,817316,817530,817744,817957,818171,818385,818598,818812,819026,819239,819453,819667,819880,820094,820308,820521,820735,820949,821162,821376,821590,821803,822017,822231,822444,822658,822872,823085,823299,823513,823726,823940,824154,824368,824581,824795,825009,825222,825436,825650,825863,826077,826291,826504,826718,826932,827145,827359,827573,827786,828000,828214,828427,828641,828855,829068,829282,829496,829709,829923,830137,830350,830564,830778,830991,831205,831419,831632,831846,832060,832274,832487,832701,832915,833128,833342,833556,833769,833983,834197,834410,834624,834838,835051,835265,835479,835692,835906,836120,836333,836547,836761,836974,837188,837402,837615,837829,838043,838256,838470,838684,838897,839111,839325,839538,839752,839966,840179,840393,840607,840821,841034,841248,841462,841675,841889,842103,842316,842530,842744,842957,843171,843385,843598,843812,844026,844239,844453,844667,844880,845094,845308,845521,845735,845949,846162,846376,846590,846803,847017,847231,847444,847658,847872,848085,848299,848513,848726,848940,849154,849368,849581,849795,850009,850222,850436,850650,850863,851077,851291,851504,851718,851932,852145,852359,852573,852786,853000,853214,853427,853641,853855,854068,854282,854496,854709,854923,855137,855350,855564,855778,855991,856205,856419,856632,856846,857060,857274,857487,857701,857915,858128,858342,858556,858769,858983,859197,859410,859624,859838,860051,860265,860479,860692,860906,861120,861333,861547,861761,861974,862188,862402,862615,862829,863043,863256,863470,863684,863897,864111,864325,864538,864752,864966,865179,865393,865607,865821,866034,866248,866462,866675,866889,867103,867316,867530,867744,867957,868171,868385,868598,868812,869026,869239,869453,869667,869880,870094,870308,870521,870735,870949,871162,871376,871590,871803,872017,872231,872444,872658,872872,873085,873299,873513,873726,873940,874154,874368,874581,874795,875009,875222,875436,875650,875863,876077,876291,876504,876718,876932,877145,877359,877573,877786,878000,878214,878427,878641,878855,879068,879282,879496,879709,879923,880137,880350,880564,880778,880991,881205,881419,881632,881846,882060,882274,882487,882701,882915,883128,883342,883556,883769,883983,
            884197,884410,884624,884838,885051,885265,885479,885692,885906,886120,886333,886547,886761,886974,887188,887402,887615,887829,888043,888256,888470,888684,888897,889111,889325,889538,889752,889966,890179,890393,890607,890821,891034,891248,891462,891675,891889,892103,892316,892530,892744,892957,893171,893385,893598,893812,894026,894239,894453,894667,894880,895094,895308,895521,895735,895949,896162,896376,896590,896803,897017,897231,897444,897658,897872,898085,898299,898513,898726,898940,899154,899368,899581,899795,900009,900222,900436,900650,900863,901077,901291,901504,901718,901932,902145,902359,902573,902786,903000,903214,903427,903641,903855,904068,904282,904496,904709,904923,905137,905350,905564,905778,905991,906205,906419,906632,906846,907060,907274,907487,907701,907915,908128,908342,908556,908769,908983,909197,909410,909624,909838,910051,910265,910479,910692,910906,911120,911333,911547,911761,911974,912188,912402,912615,912829,913043,913256,913470,913684,913897,914111,914325,914538,914752,914966,915179,915393,915607,915821,916034,916248,916462,916675,916889,917103,917316,917530,917744,917957,918171,918385,918598,918812,919026,919239,919453,919667,919880,920094,920308,920521,920735,920949,921162,921376,921590,921803,922017,922231,922444,922658,922872,923085,923299,923513,923726,923940,924154,924368,924581,924795,925009,925222,925436,925650,925863,926077,926291,926504,926718,926932,927145,927359,927573,927786,928000,928214,928427,928641,928855,929068,929282,929496,929709,929923,930137,930350,930564,930778,930991,931205,931419,931632,931846,932060,932274,932487,932701,932915,933128,933342,933556,933769,933983,934197,934410,934624,934838,935051,935265,935479,935692,935906,936120,936333,936547,936761,936974,937188,937402,937615,937829,938043,938256,938470,938684,938897,939111,939325,939538,939752,939966,940179,940393,940607,940821,941034,941248,941462,941675,941889,942103,942316,942530,942744,942957,943171,943385,943598,943812,944026,944239,944453,944667,944880,945094,945308,945521,945735,945949,946162,946376,946590,946803,947017,947231,947444,947658,947872,948085,948299,948513,948726,948940,949154,949368,949581,949795,950009,950222,950436,950650,950863,951077,951291,951504,951718,951932,952145,952359,952573,952786,953000,953214,953427,953641,953855,954068,954282,954496,954709,954923,955137,955350,955564,955778,955991,956205,956419,956632,956846,957060,957274,957487,957701,957915,958128,958342,958556,958769,958983,959197,959410,959624,959838,960051,960265,960479,960692,960906,961120,961333,961547,961761,961974,962188,962402,962615,
            962829,963043,963256,963470,963684,963897,964111,964325,964538,964752,964966,965179,965393,965607,965821,966034,966248,966462,966675,966889,967103,967316,967530,967744,967957,968171,968385,968598,968812,969026,969239,969453,969667,969880,970094,970308,970521,970735,970949,971162,971376,971590,971803,972017,972231,972444,972658,972872,973085,973299,973513,973726,973940,974154,974368,974581,974795,975009,975222,975436,975650,975863,976077,976291,976504,976718,976932,977145,977359,977573,977786,978000,978214,978427,978641,978855,979068,979282,979496,979709,979923,980137,980350,980564,980778,980991,981205,981419,981632,981846,982060,982274,982487,982701,982915,983128,983342,983556,983769,983983,984197,984410,984624,984838,985051,985265,985479,985692,985906,986120,986333,986547,986761,986974,987188,987402,987615,987829,988043,988256,988470,988684,988897,989111,989325,989538,989752,989966,990179,990393,990607,990821,991034,991248,991462,991675,991889,992103,992316,992530,992744,992957,993171,993385,993598,993812,994026,994239,994453,994667,994880,995094,995308,995521,995735,995949,996162,996376,996590,996803,997017,997231,997444,997658,997872,998085,998299,998513,998726,998940,999154,999368,999581,999795,1000009,1000222,1000436,1000650,1000863,1001077,1001291,1001504,1001718,1001932,1002145,1002359,1002573,1002786,1003000,1003214,1003427,1003641,1003855,1004068,1004282,1004496,1004709,1004923,1005137,1005350,1005564,1005778,1005991,1006205,1006419,1006632,1006846,1007060,1007274,1007487,1007701,1007915,1008128,1008342,1008556,1008769,1008983,1009197,1009410,1009624,1009838,1010051,1010265,1010479,1010692,1010906,1011120,1011333,1011547,1011761,1011974,1012188,1012402,1012615,1012829,1013043,1013256,1013470,1013684,1013897,1014111,1014325,1014538,1014752,1014966,1015179,1015393,1015607,1015821,1016034,1016248,1016462,1016675,1016889,1017103,1017316,1017530,1017744,1017957,1018171,1018385,1018598,1018812,1019026,1019239,1019453,1019667,1019880,1020094,1020308,1020521,1020735,1020949,1021162,1021376,1021590,1021803,1022017,1022231,1022444,1022658,1022872,1023085,1023299,1023513,1023726,1023940,1024154,1024368,1024581,1024795,1025009,1025222,1025436,1025650,1025863,1026077,1026291,1026504,1026718,1026932,1027145,1027359,1027573,1027786,1028000,1028214,1028427,1028641,1028855,1029068,1029282,1029496,1029709,1029923,1030137,1030350,1030564,1030778,1030991,1031205,1031419,1031632,1031846,1032060,1032274,1032487,1032701,1032915,1033128,1033342,1033556,1033769,1033983,1034197,1034410,1034624,1034838,1035051,1035265,1035479,1035692,1035906,1036120,
            1036333,1036547,1036761,1036974,1037188,1037402,1037615,1037829,1038043,1038256,1038470,1038684,1038897,1039111,1039325,1039538,1039752,1039966,1040179,1040393,1040607,1040821,1041034,1041248,1041462,1041675,1041889,1042103,1042316,1042530,1042744,1042957,1043171,1043385,1043598,1043812,1044026,1044239,1044453,1044667,1044880,1045094,1045308,1045521,1045735,1045949,1046162,1046376,1046590,1046803,1047017,1047231,1047444,1047658,1047872,1048085,1048299,1048513,1048726,1048940,1049154,1049368,1049581,1049795,1050009,1050222,1050436,1050650,1050863,1051077,1051291,1051504,1051718,1051932,1052145,1052359,1052573,1052786,1053000,1053214,1053427,1053641,1053855,1054068,1054282,1054496,1054709,1054923,1055137,1055350,1055564,1055778,1055991,1056205,1056419,1056632,1056846,1057060,1057274,1057487,1057701,1057915,1058128,1058342,1058556,1058769,1058983,1059197,1059410,1059624,1059838,1060051,1060265,1060479,1060692,1060906,1061120,1061333,1061547,1061761,1061974,1062188,1062402,1062615,1062829,1063043,1063256,1063470,1063684,1063897,1064111,1064325,1064538,1064752,1064966,1065179,1065393,1065607,1065821,1066034,1066248,1066462,1066675,1066889,1067103,1067316,1067530,1067744,1067957,1068171,1068385,1068598,1068812,1069026,1069239,1069453,1069667,1069880,1070094,1070308,1070521,1070735,1070949,1071162,1071376,1071590,1071803,1072017,1072231,1072444,1072658,1072872,1073085,1073299,1073513,1073726,1073940,1074154,1074368,1074581,1074795,1075009,1075222,1075436,1075650,1075863,1076077,1076291,1076504,1076718,1076932,1077145,1077359,1077573,1077786,1078000,1078214,1078427,1078641,1078855,1079068,1079282,1079496,1079709,1079923,1080137,1080350,1080564,1080778,1080991,1081205,1081419,1081632,1081846,1082060,1082274,1082487,1082701,1082915,1083128,1083342,1083556,1083769,1083983,1084197,1084410,1084624,1084838,1085051,1085265,1085479,1085692,1085906,1086120,1086333,1086547,1086761,1086974,1087188,1087402,1087615,1087829,1088043,1088256,1088470,1088684,1088897,1089111,1089325,1089538,1089752,1089966,1090179,1090393,1090607,1090821,1091034,1091248,1091462,1091675,1091889,1092103,1092316,1092530,1092744,1092957,1093171,1093385,1093598,1093812,1094026,1094239,1094453,1094667,1094880,1095094,1095308,1095521,1095735,1095949,1096162,1096376,1096590,1096803,1097017,1097231,1097444,1097658,1097872,1098085,1098299,1098513,1098726,1098940,1099154,1099368,1099581,1099795,1100009,1100222,1100436,1100650,1100863,1101077,1101291,1101504,1101718,1101932,1102145,1102359,1102573,1102786,1103000,1103214,1103427,1103641,1103855,1104068,1104282,1104496,1104709,1104923,
            1105137,1105350,1105564,1105778,1105991,1106205,1106419,1106632,1106846,1107060,1107274,1107487,1107701,1107915,1108128,1108342,1108556,1108769,1108983,1109197,1109410,1109624,1109838,1110051,1110265,1110479,1110692,1110906,1111120,1111333,1111547,1111761,1111974,1112188,1112402,1112615,1112829,1113043,1113256,1113470,1113684,1113897,1114111,1114325,1114538,1114752,1114966,1115179,1115393,1115607,1115821,1116034,1116248,1116462,1116675,1116889,1117103,1117316,1117530,1117744,1117957,1118171,1118385,1118598,1118812,1119026,1119239,1119453,1119667,1119880,1120094,1120308,1120521,1120735,1120949,1121162,1121376,1121590,1121803,1122017,1122231,1122444,1122658,1122872,1123085,1123299,1123513,1123726,1123940,1124154,1124368,1124581,1124795,1125009,1125222,1125436,1125650,1125863,1126077,1126291,1126504,1126718,1126932,1127145,1127359,1127573,1127786,1128000,1128641,1129282,1129923,1130564,1131205,1131846,1132487,1133128,1133769,1134410,1135051,1135692,1136333,1136974,1137615,1138256,1138897,1139538,1140179,1140821,1141462,1142103,1142744,1143385,1144026,1144667,1145308,1145949,1146590,1147231,1147872,1148513,1149154,1149795,1150436,1151077,1151718,1152359,1153000,1153641,1154282,1154923,1155564,1156205,1156846,1157487,1158128,1158769,1159410,1160051,1160692,1161333,1161974,1162615,1163256,1163897,1164538,1165179,1165821,1166462,1167103,1167744,1168385,1169026,1169667,1170308,1170949,1171590,1172231,1172872,1173513,1174154,1174795,1175436,1176077,1176718,1177359,1178000,1178641,1179282,1179923,1180564,1181205,1181846,1182487,1183128,1183769,1184410,1185051,1185692,1186333,1186974,1187615,1188256,1188897,1189538,1190179,1190821,1191462,1192103,1192744,1193385,1194026,1194667,1195308,1195949,1196590,1197231,1197872,1198513,1199154,1199795,1200436,1201077,1201718,1202359,1203000,1203641,1204282,1204923,1205564,1206205,1206846,1207487,1208128,1208769,1209410,1210051,1210692,1211333,1211974,1212615,1213256,1213897,1214538,1215179,1215821,1216462,1217103,1217744,1218385,1219026,1219667,1220308,1220949,1221590,1222231,1222872,1223513,1224154,1224795,1225436,1226077,1226718,1227359,1228000,1228641,1229282,1229923,1230564,1231205,1231846,1232487,1233128,1233769,1234410,1235051,1235692,1236333,1236974,1237615,1238256,1238897,1239538,1240179,1240821,1241462,1242103,1242744,1243385,1244026,1244667,1245308,1245949,1246590,1247231,1247872,1248513,1249154,1249795,1250436,1251077,1251718,1252359,1253000,1253641,1254282,1254923,1255564,1256205,1256846,1257487,1258128,1258769,1259410,1260051,1260692,1261333,1261974,1262615,1263256,1263897,1264538,1265179,
            1265821,1266462,1267103,1267744,1268385,1269026,1269667,1270308,1270949,1271590,1272231,1272872,1273513,1274154,1274795,1275436,1276077,1276718,1277359,1278000,1278641,1279282,1279923,1280564,1281205,1281846,1282487,1283128,1283769,1284410,1285051,1285692,1286333,1286974,1287615,1288256,1288897,1289538,1290179,1290821,1291462,1292103,1292744,1293385,1294026,1294667,1295308,1295949,1296590,1297231,1297872,1298513,1299154,1299795,1300436,1301077,1301718,1302359,1303000,1303641,1304282,1304923,1305564,1306205,1306846,1307487,1308128,1308769,1309410,1310051,1310692,1311333,1311974,1312615,1313256,1313897,1314538,1315179,1315821,1316462,1317103,1317744,1318385,1319026,1319667,1320308,1320949,1321590,1322231,1322872,1323513,1324154,1324795,1325436,1326077,1326718,1327359,1328000,1328641,1329282,1329923,1330564,1331205,1331846,1332487,1333128,1333769,1334410,1335051,1335692,1336333,1336974,1337615,1338256,1338897,1339538,1340179,1340821,1341462,1342103,1342744,1343385,1344026,1344667,1345308,1345949,1346590,1347231,1347872,1348513,1349154,1349795,1350436,1351077,1351718,1352359,1353000,1353641,1354282,1354923,1355564,1356205,1356846,1357487,1358128,1358769,1359410,1360051,1360692,1361333,1361974,1362615,1363256,1363897,1364538,1365179,1365821,1366462,1367103,1367744,1368385,1369026,1369667,1370308,1370949,1371590,1372231,1372872,1373513,1374154,1374795,1375436,1376077,1376718,1377359,1378000,1378641,1379282,1379923,1380564,1381205,1381846,1382487,1383128,1383769,1384410,1385051,1385692,1386333,1386974,1387615,1388256,1388897,1389538,1390179,1390821,1391462,1392103,1392744,1393385,1394026,1394667,1395308,1395949,1396590,1397231,1397872,1398513,1399154,1399795,1400436,1401077,1401718,1402359,1403000,1403641,1404282,1404923,1405564,1406205,1406846,1407487,1408128,1408769,1409410,1410051,1410692,1411333,1411974,1412615,1413256,1413897,1414538,1415179,1415821,1416462,1417103,1417744,1418385,1419026,1419667,1420308,1420949,1421590,1422231,1422872,1423513,1424154,1424795,1425436,1426077,1426718,1427359,1428000,1428641,1429282,1429923,1430564,1431205,1431846,1432487,1433128,1433769,1434410,1435051,1435692,1436333,1436974,1437615,1438256,1438897,1439538,1440179,1440821,1441462,1442103,1442744,1443385,1444026,1444667,1445308,1445949,1446590,1447231,1447872,1448513,1449154,1449795,1450436,1451077,1451718,1452359,1453000,1453641,1454282,1454923,1455564,1456205,1456846,1457487,1458128,1458769,1459410,1460051,1460692,1461333,1461974,1462615,1463256,1463897,1464538,1465179,1465821,1466462,1467103,1467744,1468385,1469026,1469667,1470308,1470949,1471590,
            1472231,1472872,1473513,1474154,1474795,1475436,1476077,1476718,1477359,1478000,1478641,1479282,1479923,1480564,1481205,1481846,1482487,1483128,1483769,1484410,1485051,1485692,1486333,1486974,1487615,1488256,1488897,1489538,1490179,1490821,1491462,1492103,1492744,1493385,1494026,1494667,1495308,1495949,1496590,1497231,1497872,1498513,1499154,1499795,1500436,1501077,1501718,1502359,1503000,1503641,1504282,1504923,1505564,1506205,1506846,1507487,1508128,1508769,1509410,1510051,1510692,1511333,1511974,1512615,1513256,1513897,1514538,1515179,1515821,1516462,1517103,1517744,1518385,1519026,1519667,1520308,1520949,1521590,1522231,1522872,1523513,1524154,1524795,1525436,1526077,1526718,1527359,1528000,1528641,1529282,1529923,1530564,1531205,1531846,1532487,1533128,1533769,1534410,1535051,1535692,1536333,1536974,1537615,1538256,1538897,1539538,1540179,1540821,1541462,1542103,1542744,1543385,1544026,1544667,1545308,1545949,1546590,1547231,1547872,1548513,1549154,1549795,1550436,1551077,1551718,1552359,1553000,1553641,1554282,1554923,1555564,1556205,1556846,1557487,1558128,1558769,1559410,1560051,1560692,1561333,1561974,1562615,1563256,1563897,1564538,1565179,1565821,1566462,1567103,1567744,1568385,1569026,1569667,1570308,1570949,1571590,1572231,1572872,1573513,1574154,1574795,1575436,1576077,1576718,1577359,1578000,1578641,1579282,1579923,1580564,1581205,1581846,1582487,1583128,1583769,1584410,1585051,1585692,1586333,1586974,1587615,1588256,1588897,1589538,1590179,1590821,1591462,1592103,1592744,1593385,1594026,1594667,1595308,1595949,1596590,1597231,1597872,1598513,1599154,1599795,1600436,1601077,1601718,1602359,1603000,1603641,1604282,1604923,1605564,1606205,1606846,1607487,1608128,1608769,1609410,1610051,1610692,1611333,1611974,1612615,1613256,1613897,1614538,1615179,1615821,1616462,1617103,1617744,1618385,1619026,1619667,1620308,1620949,1621590,1622231,1622872,1623513,1624154,1624795,1625436,1626077,1626718,1627359,1628000,1628641,1629282,1629923,1630564,1631205,1631846,1632487,1633128,1633769,1634410,1635051,1635692,1636333,1636974,1637615,1638256,1638897,1639538,1640179,1640821,1641462,1642103,1642744,1643385,1644026,1644667,1645308,1645949,1646590,1647231,1647872,1648513,1649154,1649795,1650436,1651077,1651718,1652359,1653000,1653641,1654282,1654923,1655564,1656205,1656846,1657487,1658128,1658769,1659410,1660051,1660692,1661333,1661974,1662615,1663256,1663897,1664538,1665179,1665821,1666462,1667103,1667744,1668385,1669026,1669667,1670308,1670949,1671590,1672231,1672872,1673513,1674154,1674795,1675436,1676077,1676718,1677359,1678000,
            1678641,1679282,1679923,1680564,1681205,1681846,1682487,1683128,1683769,1684410,1685051,1685692,1686333,1686974,1687615,1688256,1688897,1689538,1690179,1690821,1691462,1692103,1692744,1693385,1694026,1694667,1695308,1695949,1696590,1697231,1697872,1698513,1699154,1699795,1700436,1701077,1701718,1702359,1703000,1703641,1704282,1704923,1705564,1706205,1706846,1707487,1708128,1708769,1709410,1710051,1710692,1711333,1711974,1712615,1713256,1713897,1714538,1715179,1715821,1716462,1717103,1717744,1718385,1719026,1719667,1720308,1720949,1721590,1722231,1722872,1723513,1724154,1724795,1725436,1726077,1726718,1727359];

        let inde = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,
            626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,
            1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452,1453,1454,1455,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485,1486,1487,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534,1535,1536,1537,1538,1539,1540,1541,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1559,1560,1561,1562,1563,1564,1565,1566,1567,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,1595,1596,1597,1598,1599,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1631,1632,1633,1634,1635,1636,1637,1638,1639,1640,1641,1642,1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1654,1655,1656,
            1657,1658,1659,1660,1661,1662,1663,1664,1665,1666,1667,1668,1669,1670,1671,1672,1673,1674,1675,1676,1677,1678,1679,1680,1681,1682,1683,1684,1685,1686,1687,1688,1689,1690,1691,1692,1693,1694,1695,1696,1697,1698,1699,1700,1701,1702,1703,1704,1705,1706,1707,1708,1709,1710,1711,1712,1713,1714,1715,1716,1717,1718,1719,1720,1721,1722,1723,1724,1725,1726,1727,1728,1729,1730,1731,1732,1733,1734,1735,1736,1737,1738,1739,1740,1741,1742,1743,1744,1745,1746,1747,1748,1749,1750,1751,1752,1753,1754,1755,1756,1757,1758,1759,1760,1761,1762,1763,1764,1765,1766,1767,1768,1769,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,1790,1791,1792,1793,1794,1795,1796,1797,1798,1799,1800,1801,1802,1803,1804,1805,1806,1807,1808,1809,1810,1811,1812,1813,1814,1815,1816,1817,1818,1819,1820,1821,1822,1823,1824,1825,1826,1827,1828,1829,1830,1831,1832,1833,1834,1835,1836,1837,1838,1839,1840,1841,1842,1843,1844,1845,1846,1847,1848,1849,1850,1851,1852,1853,1854,1855,1856,1857,1858,1859,1860,1861,1862,1863,1864,1865,1866,1867,1868,1869,1870,1871,1872,1873,1874,1875,1876,1877,1878,1879,1880,1881,1882,1883,1884,1885,1886,1887,1888,1889,1890,1891,1892,1893,1894,1895,1896,1897,1898,1899,1900,1901,1902,1903,1904,1905,1906,1907,1908,1909,1910,1911,1912,1913,1914,1915,1916,1917,1918,1919,1920,1921,1922,1923,1924,1925,1926,1927,1928,1929,1930,1931,1932,1933,1934,1935,1936,1937,1938,1939,1940,1941,1942,1943,1944,1945,1946,1947,1948,1949,1950,1951,1952,1953,1954,1955,1956,1957,1958,1959,1960,1961,1962,1963,1964,1965,1966,1967,1968,1969,1970,1971,1972,1973,1974,1975,1976,1977,1978,1979,1980,1981,1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2136,2137,2138,2139,2140,2141,2142,2143,2144,2145,2146,2147,2148,2149,2150,2151,2152,2153,2154,2155,2156,2157,2158,2159,2160,2161,2162,2163,2164,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2182,2183,2184,2185,2186,2187,2188,2189,2190,2191,2192,2193,2194,2195,2196,2197,2198,2199,2200,2201,2202,2203,2204,2205,2206,2207,2208,2209,
            2210,2211,2212,2213,2214,2215,2216,2217,2218,2219,2220,2221,2222,2223,2224,2225,2226,2227,2228,2229,2230,2231,2232,2233,2234,2235,2236,2237,2238,2239,2240,2241,2242,2243,2244,2245,2246,2247,2248,2249,2250,2251,2252,2253,2254,2255,2256,2257,2258,2259,2260,2261,2262,2263,2264,2265,2266,2267,2268,2269,2270,2271,2272,2273,2274,2275,2276,2277,2278,2279,2280,2281,2282,2283,2284,2285,2286,2287,2288,2289,2290,2291,2292,2293,2294,2295,2296,2297,2298,2299,2300,2301,2302,2303,2304,2305,2306,2307,2308,2309,2310,2311,2312,2313,2314,2315,2316,2317,2318,2319,2320,2321,2322,2323,2324,2325,2326,2327,2328,2329,2330,2331,2332,2333,2334,2335,2336,2337,2338,2339,2340,2341,2342,2343,2344,2345,2346,2347,2348,2349,2350,2351,2352,2353,2354,2355,2356,2357,2358,2359,2360,2361,2362,2363,2364,2365,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2384,2385,2386,2387,2388,2389,2390,2391,2392,2393,2394,2395,2396,2397,2398,2399,2400,2401,2402,2403,2404,2405,2406,2407,2408,2409,2410,2411,2412,2413,2414,2415,2416,2417,2418,2419,2420,2421,2422,2423,2424,2425,2426,2427,2428,2429,2430,2431,2432,2433,2434,2435,2436,2437,2438,2439,2440,2441,2442,2443,2444,2445,2446,2447,2448,2449,2450,2451,2452,2453,2454,2455,2456,2457,2458,2459,2460,2461,2462,2463,2464,2465,2466,2467,2468,2469,2470,2471,2472,2473,2474,2475,2476,2477,2478,2479,2480,2481,2482,2483,2484,2485,2486,2487,2488,2489,2490,2491,2492,2493,2494,2495,2496,2497,2498,2499,2500,2501,2502,2503,2504,2505,2506,2507,2508,2509,2510,2511,2512,2513,2514,2515,2516,2517,2518,2519,2520,2521,2522,2523,2524,2525,2526,2527,2528,2529,2530,2531,2532,2533,2534,2535,2536,2537,2538,2539,2540,2541,2542,2543,2544,2545,2546,2547,2548,2549,2550,2551,2552,2553,2554,2555,2556,2557,2558,2559,2560,2561,2562,2563,2564,2565,2566,2567,2568,2569,2570,2571,2572,2573,2574,2575,2576,2577,2578,2579,2580,2581,2582,2583,2584,2585,2586,2587,2588,2589,2590,2591,2592,2593,2594,2595,2596,2597,2598,2599,2600,2601,2602,2603,2604,2605,2606,2607,2608,2609,2610,2611,2612,2613,2614,2615,2616,2617,2618,2619,2620,2621,2622,2623,2624,2625,2626,2627,2628,2629,2630,2631,2632,2633,2634,2635,2636,2637,2638,2639,2640,2641,2642,2643,2644,2645,2646,2647,2648,2649,2650,2651,2652,2653,2654,2655,2656,2657,2658,2659,2660,2661,2662,2663,2664,2665,2666,2667,2668,2669,2670,2671,2672,2673,2674,2675,2676,2677,2678,2679,2680,2681,2682,2683,2684,2685,2686,2687,
            2688,2689,2690,2691,2692,2693,2694,2695,2696,2697,2698,2699,2700,2701,2702,2703,2704,2705,2706,2707,2708,2709,2710,2711,2712,2713,2714,2715,2716,2717,2718,2719,2720,2721,2722,2723,2724,2725,2726,2727,2728,2729,2730,2731,2732,2733,2734,2735,2736,2737,2738,2739,2740,2741,2742,2743,2744,2745,2746,2747,2748,2749,2750,2751,2752,2753,2754,2755,2756,2757,2758,2759,2760,2761,2762,2763,2764,2765,2766,2767,2768,2769,2770,2771,2772,2773,2774,2775,2776,2777,2778,2779,2780,2781,2782,2783,2784,2785,2786,2787,2788,2789,2790,2791,2792,2793,2794,2795,2796,2797,2798,2799,2800,2801,2802,2803,2804,2805,2806,2807,2808,2809,2810,2811,2812,2813,2814,2815,2816,2817,2818,2819,2820,2821,2822,2823,2824,2825,2826,2827,2828,2829,2830,2831,2832,2833,2834,2835,2836,2837,2838,2839,2840,2841,2842,2843,2844,2845,2846,2847,2848,2849,2850,2851,2852,2853,2854,2855,2856,2857,2858,2859,2860,2861,2862,2863,2864,2865,2866,2867,2868,2869,2870,2871,2872,2873,2874,2875,2876,2877,2878,2879,2880,2881,2882,2883,2884,2885,2886,2887,2888,2889,2890,2891,2892,2893,2894,2895,2896,2897,2898,2899,2900,2901,2902,2903,2904,2905,2906,2907,2908,2909,2910,2911,2912,2913,2914,2915,2916,2917,2918,2919,2920,2921,2922,2923,2924,2925,2926,2927,2928,2929,2930,2931,2932,2933,2934,2935,2936,2937,2938,2939,2940,2941,2942,2943,2944,2945,2946,2947,2948,2949,2950,2951,2952,2953,2954,2955,2956,2957,2958,2959,2960,2961,2962,2963,2964,2965,2966,2967,2968,2969,2970,2971,2972,2973,2974,2975,2976,2977,2978,2979,2980,2981,2982,2983,2984,2985,2986,2987,2988,2989,2990,2991,2992,2993,2994,2995,2996,2997,2998,2999,3000,3001,3002,3003,3004,3005,3006,3007,3008,3009,3010,3011,3012,3013,3014,3015,3016,3017,3018,3019,3020,3021,3022,3023,3024,3025,3026,3027,3028,3029,3030,3031,3032,3033,3034,3035,3036,3037,3038,3039,3040,3041,3042,3043,3044,3045,3046,3047,3048,3049,3050,3051,3052,3053,3054,3055,3056,3057,3058,3059,3060,3061,3062,3063,3064,3065,3066,3067,3068,3069,3070,3071,3072,3073,3074,3075,3076,3077,3078,3079,3080,3081,3082,3083,3084,3085,3086,3087,3088,3089,3090,3091,3092,3093,3094,3095,3096,3097,3098,3099,3100,3101,3102,3103,3104,3105,3106,3107,3108,3109,3110,3111,3112,3113,3114,3115,3116,3117,3118,3119,3120,3121,3122,3123,3124,3125,3126,3127,3128,3129,3130,3131,3132,3133,3134,3135,3136,3137,3138,3139,3140,3141,3142,3143,3144,3145,3146,3147,3148,3149,3150,3151,3152,3153,3154,3155,3156,3157,3158,3159,3160,3161,3162,3163,3164,3165,
            3166,3167,3168,3169,3170,3171,3172,3173,3174,3175,3176,3177,3178,3179,3180,3181,3182,3183,3184,3185,3186,3187,3188,3189,3190,3191,3192,3193,3194,3195,3196,3197,3198,3199,3200,3201,3202,3203,3204,3205,3206,3207,3208,3209,3210,3211,3212,3213,3214,3215,3216,3217,3218,3219,3220,3221,3222,3223,3224,3225,3226,3227,3228,3229,3230,3231,3232,3233,3234,3235,3236,3237,3238,3239,3240,3241,3242,3243,3244,3245,3246,3247,3248,3249,3250,3251,3252,3253,3254,3255,3256,3257,3258,3259,3260,3261,3262,3263,3264,3265,3266,3267,3268,3269,3270,3271,3272,3273,3274,3275,3276,3277,3278,3279,3280,3281,3282,3283,3284,3285,3286,3287,3288,3289,3290,3291,3292,3293,3294,3295,3296,3297,3298,3299,3300,3301,3302,3303,3304,3305,3306,3307,3308,3309,3310,3311,3312,3313,3314,3315,3316,3317,3318,3319,3320,3321,3322,3323,3324,3325,3326,3327,3328,3329,3330,3331,3332,3333,3334,3335,3336,3337,3338,3339,3340,3341,3342,3343,3344,3345,3346,3347,3348,3349,3350,3351,3352,3353,3354,3355,3356,3357,3358,3359,3360,3361,3362,3363,3364,3365,3366,3367,3368,3369,3370,3371,3372,3373,3374,3375,3376,3377,3378,3379,3380,3381,3382,3383,3384,3385,3386,3387,3388,3389,3390,3391,3392,3393,3394,3395,3396,3397,3398,3399,3400,3401,3402,3403,3404,3405,3406,3407,3408,3409,3410,3411,3412,3413,3414,3415,3416,3417,3418,3419,3420,3421,3422,3423,3424,3425,3426,3427,3428,3429,3430,3431,3432,3433,3434,3435,3436,3437,3438,3439,3440,3441,3442,3443,3444,3445,3446,3447,3448,3449,3450,3451,3452,3453,3454,3455,3456,3457,3458,3459,3460,3461,3462,3463,3464,3465,3466,3467,3468,3469,3470,3471,3472,3473,3474,3475,3476,3477,3478,3479,3480,3481,3482,3483,3484,3485,3486,3487,3488,3489,3490,3491,3492,3493,3494,3495,3496,3497,3498,3499,3500,3501,3502,3503,3504,3505,3506,3507,3508,3509,3510,3511,3512,3513,3514,3515,3516,3517,3518,3519,3520,3521,3522,3523,3524,3525,3526,3527,3528,3529,3530,3531,3532,3533,3534,3535,3536,3537,3538,3539,3540,3541,3542,3543,3544,3545,3546,3547,3548,3549,3550,3551,3552,3553,3554,3555,3556,3557,3558,3559,3560,3561,3562,3563,3564,3565,3566,3567,3568,3569,3570,3571,3572,3573,3574,3575,3576,3577,3578,3579,3580,3581,3582,3583,3584,3585,3586,3587,3588,3589,3590,3591,3592,3593,3594,3595,3596,3597,3598,3599,3600,3601,3602,3603,3604,3605,3606,3607,3608,3609,3610,3611,3612,3613,3614,3615,3616,3617,3618,3619,3620,3621,3622,3623,3624,3625,3626,3627,3628,3629,3630,3631,3632,3633,3634,3635,3636,3637,3638,3639,3640,3641,3642,3643,
            3644,3645,3646,3647,3648,3649,3650,3651,3652,3653,3654,3655,3656,3657,3658,3659,3660,3661,3662,3663,3664,3665,3666,3667,3668,3669,3670,3671,3672,3673,3674,3675,3676,3677,3678,3679,3680,3681,3682,3683,3684,3685,3686,3687,3688,3689,3690,3691,3692,3693,3694,3695,3696,3697,3698,3699,3700,3701,3702,3703,3704,3705,3706,3707,3708,3709,3710,3711,3712,3713,3714,3715,3716,3717,3718,3719,3720,3721,3722,3723,3724,3725,3726,3727,3728,3729,3730,3731,3732,3733,3734,3735,3736,3737,3738,3739,3740,3741,3742,3743,3744,3745,3746,3747,3748,3749,3750,3751,3752,3753,3754,3755,3756,3757,3758,3759,3760,3761,3762,3763,3764,3765,3766,3767,3768,3769,3770,3771,3772,3773,3774,3775,3776,3777,3778,3779,3780,3781,3782,3783,3784,3785,3786,3787,3788,3789,3790,3791,3792,3793,3794,3795,3796,3797,3798,3799,3800,3801,3802,3803,3804,3805,3806,3807,3808,3809,3810,3811,3812,3813,3814,3815,3816,3817,3818,3819,3820,3821,3822,3823,3824,3825,3826,3827,3828,3829,3830,3831,3832,3833,3834,3835,3836,3837,3838,3839,3840,3841,3842,3843,3844,3845,3846,3847,3848,3849,3850,3851,3852,3853,3854,3855,3856,3857,3858,3859,3860,3861,3862,3863,3864,3865,3866,3867,3868,3869,3870,3871,3872,3873,3874,3875,3876,3877,3878,3879,3880,3881,3882,3883,3884,3885,3886,3887,3888,3889,3890,3891,3892,3893,3894,3895,3896,3897,3898,3899,3900,3901,3902,3903,3904,3905,3906,3907,3908,3909,3910,3911,3912,3913,3914,3915,3916,3917,3918,3919,3920,3921,3922,3923,3924,3925,3926,3927,3928,3929,3930,3931,3932,3933,3934,3935,3936,3937,3938,3939,3940,3941,3942,3943,3944,3945,3946,3947,3948,3949,3950,3951,3952,3953,3954,3955,3956,3957,3958,3959,3960,3961,3962,3963,3964,3965,3966,3967,3968,3969,3970,3971,3972,3973,3974,3975,3976,3977,3978,3979,3980,3981,3982,3983,3984,3985,3986,3987,3988,3989,3990,3991,3992,3993,3994,3995,3996,3997,3998,3999,4000,4001,4002,4003,4004,4005,4006,4007,4008,4009,4010,4011,4012,4013,4014,4015,4016,4017,4018,4019,4020,4021,4022,4023,4024,4025,4026,4027,4028,4029,4030,4031,4032,4033,4034,4035,4036,4037,4038,4039,4040,4041,4042,4043,4044,4045,4046,4047,4048,4049,4050,4051,4052,4053,4054,4055,4056,4057,4058,4059,4060,4061,4062,4063,4064,4065,4066,4067,4068,4069,4070,4071,4072,4073,4074,4075,4076,4077,4078,4079,4080,4081,4082,4083,4084,4085,4086,4087,4088,4089,4090,4091,4092,4093,4094,4095,4096,4097,4098,4099,4100,4101,4102,4103,4104,4105,4106,4107,4108,4109,4110,4111,4112,4113,4114,4115,4116,4117,4118,4119,4120,4121,4122,4123,4124,4125,4126,4127,4128,4129,4130,4131,4132,4133,4134,4135,4136,4137,4138,4139,4140,4141,4142,4143,4144,4145,4146,4147,4148,4149,4150,4151,4152,4153,4154,4155,4156,4157,4158,4159,4160,4161,4162,4163,4164,4165,4166,4167,4168,4169,4170,4171,4172,4173,4174,4175,4176,4177,4178,4179,4180,4181,4182,4183,4184,4185,4186,4187,4188,4189,4190,4191,4192,4193,4194,4195,4196,4197,4198,4199,4200,4201,
            4202,4203,4204,4205,4206,4207,4208,4209,4210,4211,4212,4213,4214,4215,4216,4217,4218,4219,4220,4221,4222,4223,4224,4225,4226,4227,4228,4229,4230,4231,4232,4233,4234,4235,4236,4237,4238,4239,4240,4241,4242,4243,4244,4245,4246,4247,4248,4249,4250,4251,4252,4253,4254,4255,4256,4257,4258,4259,4260,4261,4262,4263,4264,4265,4266,4267,4268,4269,4270,4271,4272,4273,4274,4275,4276,4277,4278,4279,4280,4281,4282,4283,4284,4285,4286,4287,4288,4289,4290,4291,4292,4293,4294,4295,4296,4297,4298,4299,4300,4301,4302,4303,4304,4305,4306,4307,4308,4309,4310,4311,4312,4313,4314,4315,4316,4317,4318,4319,4320,4321,4322,4323,4324,4325,4326,4327,4328,4329,4330,4331,4332,4333,4334,4335,4336,4337,4338,4339,4340,4341,4342,4343,4344,4345,4346,4347,4348,4349,4350,4351,4352,4353,4354,4355,4356,4357,4358,4359,4360,4361,4362,4363,4364,4365,4366,4367,4368,4369,4370,4371,4372,4373,4374,4375,4376,4377,4378,4379,4380,4381,4382,4383,4384,4385,4386,4387,4388,4389,4390,4391,4392,4393,4394,4395,4396,4397,4398,4399,4400,4401,4402,4403,4404,4405,4406,4407,4408,4409,4410,4411,4412,4413,4414,4415,4416,4417,4418,4419,4420,4421,4422,4423,4424,4425,4426,4427,4428,4429,4430,4431,4432,4433,4434,4435,4436,4437,4438,4439,4440,4441,4442,4443,4444,4445,4446,4447,4448,4449,4450,4451,4452,4453,4454,4455,4456,4457,4458,4459,4460,4461,4462,4463,4464,4465,4466,4467,4468,4469,4470,4471,4472,4473,4474,4475,4476,4477,4478,4479,4480,4481,4482,4483,4484,4485,4486,4487,4488,4489,4490,4491,4492,4493,4494,4495,4496,4497,4498,4499,4500,4501,4502,4503,4504,4505,4506,4507,4508,4509,4510,4511,4512,4513,4514,4515,4516,4517,4518,4519,4520,4521,4522,4523,4524,4525,4526,4527,4528,4529,4530,4531,4532,4533,4534,4535,4536,4537,4538,4539,4540,4541,4542,4543,4544,4545,4546,4547,4548,4549,4550,4551,4552,4553,4554,4555,4556,4557,4558,4559,4560,4561,4562,4563,4564,4565,4566,4567,4568,4569,4570,4571,4572,4573,4574,4575,4576,4577,4578,4579,4580,4581,4582,4583,4584,4585,4586,4587,4588,4589,4590,4591,4592,4593,4594,4595,4596,4597,4598,4599,4600,4601,4602,4603,4604,4605,4606,4607,4608,4609,4610,4611,4612,4613,4614,4615,4616,4617,4618,4619,4620,4621,4622,4623,4624,4625,4626,4627,4628,4629,4630,4631,4632,4633,4634,4635,4636,4637,4638,4639,4640,4641,4642,4643,4644,4645,4646,4647,4648,4649,4650,4651,4652,4653,4654,4655,4656,4657,4658,4659,4660,4661,4662,4663,4664,4665,4666,4667,4668,4669,4670,4671,4672,4673,4674,4675,4676,4677,4678,4679];

        let initialTime = Date.now();
        let fromDate = Date.now();

        let detections = [];
        let flowCommited = true;
        let warmUp = true;
        let controlCount = 0;
        
        let count = 0;
        let count2 = 0;
        

        let fromDates = [100]
        let detection = {
            detectionDateTime: Date.now(),
            numberCars: 2,
            sensorKilometer: 1,
            direction: 'ASCENDENT',
        };
        detections = [detection];
        

            this.createDetectionSensor(ctx, 1, detections, parseInt(timeData), parseInt(frequency)).then(() => {


                            orquestator(ctx, numberSensors, streetKilometers, minutes, dataFrequency, timeData, maxCalculationTime, minCalculationTime,
                                frequencyControlCalculate, experimentNumber, frequency);
                  

                
            });

        /*var avgExecTime = 0;
        var calculationDates = [];

        var intervalCalculate = setInterval(() => {
        
            calculationDates.push(fromDate);
                fromDate += frequency*1000;
        }, frequency*1000);

        var interval = await setInterval(() => {

            if( detections.length >= 5 && flowCommited){

                flowCommited = false;
                let submit = detections;
                detections = [];
                for (let i = 1; i <= numberSensors; i++) {
                    this.createDetectionSensor(ctx, i, JSON.stringify(submit), timeData, dataFrequency).then((res) => {
                        res = JSON.parse(res.toString())
                        
                            setTimeout(() => {
                                count++;
            
                                if(count == numberSensors){
    
                                    this.calculateFlowV2(timeData, JSON.stringify(calculationDates), numberSensors, res.frequency).then((res2) => {
                                        res2 = JSON.parse(res2.toString())
                                        flowCommited = true;
                                        if(warmUp){
                        
                                            avgExecTime += res2.execDuration/frequencyControlCalculate;
                                            controlCount++;
                        
                                            if(avgExecTime > minCalculationTime){
                        
                                                warmUp = false;
                                                
                                            }else if(controlCount >= frequencyControlCalculate){
                                                controlCount = 0;
                                                avgExecTime = 0;
                                            }
                        
                                        }else if(!warmUp && controlCount >= frequencyControlCalculate && experimentNumber == 2){
                        
                                            avgExecTime += res2.execDuration/frequencyControlCalculate;
                                            
                                            this.monitorTime(ctx, timeData, avgExecTime, maxCalculationTime, minCalculationTime).then((res) => {
                                                let newTime = JSON.parse(res.toString());
                                                if(newTime < 32){
                                                    newTime = 32;
                                                }else if (newTime > 65536){
                                                    newTime = 65536;
                                                }
                        
                                                if(newTime > 0 && newTime != timeData){
                                                    timeData = newTime;
                                                
                                                }
                                            });
                                            controlCount = 0;
                                            avgExecTime = 0;
                                        }else if(!warmUp && controlCount >= frequencyControlCalculate && experimentNumber >= 3){
                                            avgExecTime += res2.execDuration/frequencyControlCalculate;
                                            
                                            this.monitorFrequency(ctx, dataFrequency, avgExecTime, maxCalculationTime, minCalculationTime).then((res) => {
                                                let newTime = JSON.parse(res.toString());
                                                if(newTime < 0.1){
                                                    newTime = 0.1;
                                                }else if (newTime > 60){
                                                    newTime = 60;
                                                }
                        
                                                if(newTime > 0 && newTime != dataFrequency){
                                                    clearInterval(interval);
                                                    clearInterval(intervalCalculate);
                                                    dataFrequency = newTime;
    
                                                    this.bucle(detections,flowCommited,timeData,dataFrequency,count,numberSensors,fromDate,
                                                        warmUp,frequencyControlCalculate,minCalculationTime,maxCalculationTime,controlCount,
                                                        experimentNumber,streetKilometers, initialTime, inde, timeStart, velocities, frequency);
    
                                                   
                                                    
                                                }
                                            });
                                            controlCount = 0;
                                            avgExecTime = 0;
                                        }else if(!warmUp && controlCount < frequencyControlCalculate){
                                            controlCount++;
                                            avgExecTime += res2.execDuration/frequencyControlCalculate;
                                        }
                                    });
        
                                    calculationDates = [];
                                    count = 0;
                                }                  
                            }, i*10);                            
                            
                    });
                }
    

            }else{
                let detection = {
                    detectionDateTime: Date.now(),
                    numberCars: inde.filter((i) => {
                        return (velocities[i] * (Date.now() - initialTime - timeStart[i])/3600000) >= (streetKilometers*numberSensor)/numberSensors &&
                         (velocities[i] * (Date.now() - initialTime - 1000 - timeStart[i])/3600000) < (streetKilometers*numberSensor)/numberSensors;
                    }).length,
                    sensorKilometer: (streetKilometers*numberSensor)/numberSensors,
                    direction: 'ASCENDENT',
                };
                detections.push(detection);
            }
        }, dataFrequency*1000);*/
        


    }

    async querySensor2(ctx, numberSensor) {
        let res = await this.querySensor(ctx, numberSensor);
        submitTra
        return JSON.parse(res.toString())[0].Record.detections;
    
    }

    async bucle(ctx, numberSensor, detections, timeData, frequency) {
        await this.createDetectionSensor(ctx, numberSensor, detections, timeData, frequency);
        this.bucle(ctx, numberSensor, detections, timeData, frequency);
    
    }

    async bucle2(ctx, numberSensor, detections, timeData, frequency) {
        await ctx.stub.invokeChaincode('createDetectionSensor',ctx, numberSensor, detections, timeData, frequency);
        ctx.stub.invokeChaincode('bucle',ctx, numberSensor, detections, timeData, frequency);
    
    }

    async requestTest(ctx) {
        let res = 'fallo';
        let pro = await new Promise(function(resolve, reject){
            request('http://dummy.restapiexample.com/api/v1/employees', function (error, response, body) {
                if(!error){
                    res =  JSON.parse(body).data;
                    resolve();
                } else {
                    res = error;
                    resolve();
                }
            });
    
        })




            return res;
    
    }

    async queryStreetFlows(ctx, streetId) {
    
        let queryString = `{
            "selector": {
                "streetId": {
                    "$eq": ${streetId}
                }
            }
        }`;
        return this.queryWithQueryString(ctx, queryString);
    
    }

    async createStreetFlows(ctx, streetId) {
        
    
        const streetflows = {
            streetId: parseInt(streetId),
            flows: [],
        };
    
        await ctx.stub.putState('STREETFLOWS'+streetId, Buffer.from(JSON.stringify(streetflows)));
    }
        
    async queryWithQueryString(ctx, queryString) {
    
        console.log('query String');
        console.log(JSON.stringify(queryString));
    
        let resultsIterator = await ctx.stub.getQueryResult(queryString);
    
        let allResults = [];
    
        // eslint-disable-next-line no-constant-condition
        while (true) {
            let res = await resultsIterator.next();
    
            if (res.value && res.value.value.toString()) {
                let jsonRes = {};
    
                console.log(res.value.value.toString('utf8'));
    
                jsonRes.Key = res.value.key;
    
                try {
                    jsonRes.Record = JSON.parse(res.value.value.toString('utf8'));
                } catch (err) {
                    console.log(err);
                    jsonRes.Record = res.value.value.toString('utf8');
                }
    
                allResults.push(jsonRes);
            }
            if (res.done) {
                console.log('end of data');
                await resultsIterator.close();
                console.info(allResults);
                console.log(JSON.stringify(allResults));
                return JSON.stringify(allResults);
            }
        }
    
    }

}

module.exports = Street_network;
